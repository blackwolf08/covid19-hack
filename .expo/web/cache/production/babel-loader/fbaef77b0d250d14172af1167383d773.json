{"ast":null,"code":"import Animated from\"react-native-reanimated\";import processColor from\"react-native-web/dist/exports/processColor\";var cond=Animated.cond,add=Animated.add,multiply=Animated.multiply,lessThan=Animated.lessThan,abs=Animated.abs,modulo=Animated.modulo,round=Animated.round,interpolate=Animated.interpolate,divide=Animated.divide,sub=Animated.sub,color=Animated.color,Extrapolate=Animated.Extrapolate;export var opacity=function opacity(c){return(c>>24&255)/255;};export var red=function red(c){return c>>16&255;};export var green=function green(c){return c>>8&255;};export var blue=function blue(c){return c&255;};function match(condsAndResPairs){var offset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;if(condsAndResPairs.length-offset===1){return condsAndResPairs[offset];}if(condsAndResPairs.length-offset===0){return undefined;}return cond(condsAndResPairs[offset],condsAndResPairs[offset+1],match(condsAndResPairs,offset+2));}function colorHSV(h,s,v){var c=multiply(v,s);var hh=divide(h,60);var x=multiply(c,sub(1,abs(sub(modulo(hh,2),1))));var m=sub(v,c);var colorRGB=function colorRGB(r,g,b){return color(round(multiply(255,add(r,m))),round(multiply(255,add(g,m))),round(multiply(255,add(b,m))));};return match([lessThan(h,60),colorRGB(c,x,0),lessThan(h,120),colorRGB(x,c,0),lessThan(h,180),colorRGB(0,c,x),lessThan(h,240),colorRGB(0,x,c),lessThan(h,300),colorRGB(x,0,c),colorRGB(c,0,x)]);}var rgbToHsv=function rgbToHsv(c){var r=red(c)/255;var g=green(c)/255;var b=blue(c)/255;var ma=Math.max(r,g,b);var mi=Math.min(r,g,b);var h=0;var v=ma;var d=ma-mi;var s=ma===0?0:d/ma;if(ma===mi){h=0;}else{switch(ma){case r:h=(g-b)/d+(g<b?6:0);break;case g:h=(b-r)/d+2;break;case b:h=(r-g)/d+4;break;default:}h/=6;}return{h:h*360,s:s,v:v};};var interpolateColorsHSV=function interpolateColorsHSV(animationValue,inputRange,colors){var colorsAsHSV=colors.map(function(c){return rgbToHsv(c);});var h=interpolate(animationValue,{inputRange:inputRange,outputRange:colorsAsHSV.map(function(c){return c.h;}),extrapolate:Extrapolate.CLAMP});var s=interpolate(animationValue,{inputRange:inputRange,outputRange:colorsAsHSV.map(function(c){return c.s;}),extrapolate:Extrapolate.CLAMP});var v=interpolate(animationValue,{inputRange:inputRange,outputRange:colorsAsHSV.map(function(c){return c.v;}),extrapolate:Extrapolate.CLAMP});return colorHSV(h,s,v);};var interpolateColorsRGB=function interpolateColorsRGB(animationValue,inputRange,colors){var r=round(interpolate(animationValue,{inputRange:inputRange,outputRange:colors.map(function(c){return red(c);}),extrapolate:Extrapolate.CLAMP}));var g=round(interpolate(animationValue,{inputRange:inputRange,outputRange:colors.map(function(c){return green(c);}),extrapolate:Extrapolate.CLAMP}));var b=round(interpolate(animationValue,{inputRange:inputRange,outputRange:colors.map(function(c){return blue(c);}),extrapolate:Extrapolate.CLAMP}));var a=round(interpolate(animationValue,{inputRange:inputRange,outputRange:colors.map(function(c){return opacity(c);}),extrapolate:Extrapolate.CLAMP}));return color(r,g,b,a);};export var interpolateColor=function interpolateColor(value,config){var colorSpace=arguments.length>2&&arguments[2]!==undefined?arguments[2]:\"rgb\";var inputRange=config.inputRange;var outputRange=config.outputRange.map(function(c){return typeof c===\"number\"?c:processColor(c);});if(colorSpace===\"hsv\"){return interpolateColorsHSV(value,inputRange,outputRange);}return interpolateColorsRGB(value,inputRange,outputRange);};export var bInterpolateColor=function bInterpolateColor(value,color1,color2){var colorSpace=arguments.length>3&&arguments[3]!==undefined?arguments[3]:\"rgb\";return interpolateColor(value,{inputRange:[0,1],outputRange:[color1,color2]},colorSpace);};","map":{"version":3,"sources":["Colors.ts"],"names":["cond","add","multiply","lessThan","abs","modulo","round","interpolate","divide","sub","color","Extrapolate","Animated","opacity","c","red","green","blue","offset","condsAndResPairs","match","hh","x","m","colorRGB","rgbToHsv","r","g","b","ma","Math","mi","h","v","d","s","interpolateColorsHSV","colorsAsHSV","colors","inputRange","outputRange","extrapolate","colorHSV","interpolateColorsRGB","a","interpolateColor","colorSpace","config","processColor","bInterpolateColor"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\nimport { processColor } from \"react-native\";\n\nconst {\n  cond,\n  add,\n  multiply,\n  lessThan,\n  abs,\n  modulo,\n  round,\n  interpolate,\n  divide,\n  sub,\n  color,\n  Extrapolate\n} = Animated;\n\ntype Color = string | number;\n\nexport const opacity = (c: number) => ((c >> 24) & 255) / 255;\nexport const red = (c: number) => (c >> 16) & 255;\nexport const green = (c: number) => (c >> 8) & 255;\nexport const blue = (c: number) => c & 255;\n\nfunction match(\n  condsAndResPairs: readonly Animated.Node<number>[],\n  offset = 0\n): undefined | Animated.Node<number> {\n  if (condsAndResPairs.length - offset === 1) {\n    return condsAndResPairs[offset];\n  }\n  if (condsAndResPairs.length - offset === 0) {\n    return undefined;\n  }\n  return cond(\n    condsAndResPairs[offset],\n    condsAndResPairs[offset + 1],\n    match(condsAndResPairs, offset + 2)\n  );\n}\n\nfunction colorHSV(\n  h: Animated.Adaptable<number> /* 0 - 360 */,\n  s: Animated.Adaptable<number> /* 0 - 1 */,\n  v: Animated.Adaptable<number> /* 0 - 1 */\n): Animated.Node<number> {\n  // Converts color from HSV format into RGB\n  // Formula explained here: https://www.rapidtables.com/convert/color/hsv-to-rgb.html\n  const c = multiply(v, s);\n  const hh = divide(h, 60);\n  const x = multiply(c, sub(1, abs(sub(modulo(hh, 2), 1))));\n\n  const m = sub(v, c);\n\n  const colorRGB = (\n    r: Animated.Adaptable<number>,\n    g: Animated.Adaptable<number>,\n    b: Animated.Adaptable<number>\n  ) =>\n    color(\n      round(multiply(255, add(r, m))),\n      round(multiply(255, add(g, m))),\n      round(multiply(255, add(b, m)))\n    );\n\n  return match([\n    lessThan(h, 60),\n    colorRGB(c, x, 0),\n    lessThan(h, 120),\n    colorRGB(x, c, 0),\n    lessThan(h, 180),\n    colorRGB(0, c, x),\n    lessThan(h, 240),\n    colorRGB(0, x, c),\n    lessThan(h, 300),\n    colorRGB(x, 0, c),\n    colorRGB(c, 0, x) /* else */\n  ]) as Animated.Node<number>;\n}\n\nconst rgbToHsv = (c: number) => {\n  const r = red(c) / 255;\n  const g = green(c) / 255;\n  const b = blue(c) / 255;\n\n  const ma = Math.max(r, g, b);\n  const mi = Math.min(r, g, b);\n  let h = 0;\n  const v = ma;\n\n  const d = ma - mi;\n  const s = ma === 0 ? 0 : d / ma;\n  if (ma === mi) {\n    h = 0; // achromatic\n  } else {\n    switch (ma) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n      default: // do nothing\n    }\n    h /= 6;\n  }\n  return { h: h * 360, s, v };\n};\n\nconst interpolateColorsHSV = (\n  animationValue: Animated.Adaptable<number>,\n  inputRange: number[],\n  colors: number[]\n): Animated.Node<number> => {\n  const colorsAsHSV = colors.map(c => rgbToHsv(c));\n  const h = interpolate(animationValue, {\n    inputRange,\n    outputRange: colorsAsHSV.map(c => c.h),\n    extrapolate: Extrapolate.CLAMP\n  });\n  const s = interpolate(animationValue, {\n    inputRange,\n    outputRange: colorsAsHSV.map(c => c.s),\n    extrapolate: Extrapolate.CLAMP\n  });\n  const v = interpolate(animationValue, {\n    inputRange,\n    outputRange: colorsAsHSV.map(c => c.v),\n    extrapolate: Extrapolate.CLAMP\n  });\n  return colorHSV(h, s, v);\n};\n\nconst interpolateColorsRGB = (\n  animationValue: Animated.Adaptable<number>,\n  inputRange: number[],\n  colors: number[]\n) => {\n  const r = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(c => red(c)),\n      extrapolate: Extrapolate.CLAMP\n    })\n  );\n  const g = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(c => green(c)),\n      extrapolate: Extrapolate.CLAMP\n    })\n  );\n  const b = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(c => blue(c)),\n      extrapolate: Extrapolate.CLAMP\n    })\n  );\n  const a = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(c => opacity(c)),\n      extrapolate: Extrapolate.CLAMP\n    })\n  );\n  return color(r, g, b, a);\n};\n\ninterface ColorInterpolationConfig {\n  inputRange: number[];\n  outputRange: Color[];\n}\n\nexport const interpolateColor = (\n  value: Animated.Adaptable<number>,\n  config: ColorInterpolationConfig,\n  colorSpace: \"hsv\" | \"rgb\" = \"rgb\"\n): Animated.Node<number> => {\n  const { inputRange } = config;\n  const outputRange = config.outputRange.map(c =>\n    typeof c === \"number\" ? c : processColor(c)\n  );\n  if (colorSpace === \"hsv\") {\n    return interpolateColorsHSV(value, inputRange, outputRange);\n  }\n  return interpolateColorsRGB(value, inputRange, outputRange);\n};\n\nexport const bInterpolateColor = (\n  value: Animated.Adaptable<number>,\n  color1: Color,\n  color2: Color,\n  colorSpace: \"hsv\" | \"rgb\" = \"rgb\"\n) =>\n  interpolateColor(\n    value,\n    {\n      inputRange: [0, 1],\n      outputRange: [color1, color2]\n    },\n    colorSpace\n  );\n"]},"metadata":{},"sourceType":"module"}