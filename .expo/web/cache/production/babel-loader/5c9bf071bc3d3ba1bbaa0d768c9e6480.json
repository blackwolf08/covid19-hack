{"ast":null,"code":"import Animated from\"react-native-reanimated\";var set=Animated.set,cond=Animated.cond,add=Animated.add,multiply=Animated.multiply,lessThan=Animated.lessThan,abs=Animated.abs,divide=Animated.divide,sub=Animated.sub,min2=Animated.min,max2=Animated.max,greaterThan=Animated.greaterThan,pow=Animated.pow,and=Animated.and,greaterOrEq=Animated.greaterOrEq,lessOrEq=Animated.lessOrEq,proc=Animated.proc;export var bin=function bin(value){return value?1:0;};export var inc=function inc(value){return set(value,add(value,1));};export var dec=function dec(value){return set(value,sub(value,1));};export var min=function min(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return args.reduce(function(acc,arg){return min2(acc,arg);});};export var max=function max(){for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2];}return args.reduce(function(acc,arg){return max2(acc,arg);});};export var clamp=function clamp(value,lowerBound,upperBound){return min2(max2(lowerBound,value),upperBound);};export var between=function between(value,lowerBound,upperBound){var inclusive=arguments.length>3&&arguments[3]!==undefined?arguments[3]:true;if(inclusive){return and(greaterOrEq(value,lowerBound),lessOrEq(value,upperBound));}return and(greaterThan(value,lowerBound),lessThan(value,upperBound));};export var approximates=function approximates(a,b){var precision=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0.001;return lessThan(abs(sub(a,b)),precision);};export var toRad=function toRad(deg){return multiply(deg,Math.PI/180);};export var toDeg=function toDeg(rad){return multiply(rad,180/Math.PI);};var atan2Proc=proc(function(y,x){var coeff1=Math.PI/4;var coeff2=3*coeff1;var absY=abs(y);var angle=cond(greaterOrEq(x,0),[sub(coeff1,multiply(coeff1,divide(sub(x,absY),add(x,absY))))],[sub(coeff2,multiply(coeff1,divide(add(x,absY),sub(absY,x))))]);return cond(lessThan(y,0),multiply(angle,-1),angle);});export var atan2=function atan2(y,x){return atan2Proc(y,x);};export var cubicBezier=function cubicBezier(t,p0,p1,p2,p3){var term=sub(1,t);var a=multiply(1,pow(term,3),pow(t,0),p0);var b=multiply(3,pow(term,2),pow(t,1),p1);var c=multiply(3,pow(term,1),pow(t,2),p2);var d=multiply(1,pow(term,0),pow(t,3),p3);return add(a,b,c,d);};","map":{"version":3,"sources":["Math.ts"],"names":["set","cond","add","multiply","lessThan","abs","divide","sub","min","min2","max","max2","greaterThan","pow","and","greaterOrEq","lessOrEq","proc","Animated","bin","value","inc","dec","args","clamp","between","inclusive","approximates","precision","toRad","Math","toDeg","atan2Proc","coeff1","coeff2","absY","angle","atan2","cubicBezier","term","a","b","c","d"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\n\nconst {\n  set,\n  cond,\n  add,\n  multiply,\n  lessThan,\n  abs,\n  divide,\n  sub,\n  min: min2,\n  max: max2,\n  greaterThan,\n  pow,\n  and,\n  greaterOrEq,\n  lessOrEq,\n  proc\n} = Animated;\n\nexport const bin = (value: boolean): 0 | 1 => (value ? 1 : 0);\n\nexport const inc = (value: Animated.Value<number>) => set(value, add(value, 1));\n\nexport const dec = (value: Animated.Value<number>) => set(value, sub(value, 1));\n\nexport const min = (...args: Animated.Adaptable<number>[]) =>\n  args.reduce((acc, arg) => min2(acc, arg));\n\nexport const max = (...args: Animated.Adaptable<number>[]) =>\n  args.reduce((acc, arg) => max2(acc, arg));\n\nexport const clamp = (\n  value: Animated.Adaptable<number>,\n  lowerBound: Animated.Adaptable<number>,\n  upperBound: Animated.Adaptable<number>\n): Animated.Node<number> => min2(max2(lowerBound, value), upperBound);\n\nexport const between = (\n  value: Animated.Node<number>,\n  lowerBound: Animated.Adaptable<number>,\n  upperBound: Animated.Adaptable<number>,\n  inclusive = true\n) => {\n  if (inclusive) {\n    return and(greaterOrEq(value, lowerBound), lessOrEq(value, upperBound));\n  }\n  return and(greaterThan(value, lowerBound), lessThan(value, upperBound));\n};\n\nexport const approximates = (\n  a: Animated.Adaptable<number>,\n  b: Animated.Adaptable<number>,\n  precision: Animated.Adaptable<number> = 0.001\n) => lessThan(abs(sub(a, b)), precision);\n\nexport const toRad = (deg: Animated.Adaptable<number>): Animated.Node<number> =>\n  multiply(deg, Math.PI / 180);\n\nexport const toDeg = (rad: Animated.Adaptable<number>): Animated.Node<number> =>\n  multiply(rad, 180 / Math.PI);\n\n// https://en.wikipedia.org/wiki/Atan2\n// https://www.gamedev.net/forums/topic/441464-manually-implementing-atan2-or-atan/\n// https://developer.download.nvidia.com/cg/atan2.html\nconst atan2Proc = proc(\n  (y: Animated.Adaptable<number>, x: Animated.Adaptable<number>) => {\n    const coeff1 = Math.PI / 4;\n    const coeff2 = 3 * coeff1;\n    const absY = abs(y);\n    const angle = cond(\n      greaterOrEq(x, 0),\n      [sub(coeff1, multiply(coeff1, divide(sub(x, absY), add(x, absY))))],\n      [sub(coeff2, multiply(coeff1, divide(add(x, absY), sub(absY, x))))]\n    );\n    return cond(lessThan(y, 0), multiply(angle, -1), angle);\n  }\n);\n\nexport const atan2 = (\n  y: Animated.Adaptable<number>,\n  x: Animated.Adaptable<number>\n): Animated.Node<number> => atan2Proc(y, x);\n\nexport const cubicBezier = (\n  t: Animated.Adaptable<number>,\n  p0: Animated.Adaptable<number>,\n  p1: Animated.Adaptable<number>,\n  p2: Animated.Adaptable<number>,\n  p3: Animated.Adaptable<number>\n): Animated.Node<number> => {\n  const term = sub(1, t);\n  const a = multiply(1, pow(term, 3), pow(t, 0), p0);\n  const b = multiply(3, pow(term, 2), pow(t, 1), p1);\n  const c = multiply(3, pow(term, 1), pow(t, 2), p2);\n  const d = multiply(1, pow(term, 0), pow(t, 3), p3);\n  return add(a, b, c, d);\n};\n"]},"metadata":{},"sourceType":"module"}