{"ast":null,"code":"'use strict';var expirationYear=require(\"./expiration-year\");var isArray=require(\"./lib/is-array\");function getNumberOfMonthDigitsInDateString(dateString){var firstCharacter=Number(dateString[0]);var assumedYear;if(firstCharacter===0){return 2;}if(firstCharacter>1){return 1;}if(firstCharacter===1&&Number(dateString[1])>2){return 1;}if(firstCharacter===1){assumedYear=dateString.substr(1);return expirationYear(assumedYear).isPotentiallyValid?1:2;}if(dateString.length===5){return 1;}if(dateString.length>5){return 2;}return 1;}function parseDate(date){var month,numberOfDigitsInMonth;if(/^\\d{4}-\\d{1,2}$/.test(date)){date=date.split('-').reverse();}else if(/\\//.test(date)){date=date.split(/\\s*\\/\\s*/g);}else if(/\\s/.test(date)){date=date.split(/ +/g);}if(isArray(date)){return{month:date[0]||'',year:date.slice(1).join()};}numberOfDigitsInMonth=getNumberOfMonthDigitsInDateString(date);month=date.substr(0,numberOfDigitsInMonth);return{month:month,year:date.substr(month.length)};}module.exports=parseDate;","map":{"version":3,"sources":["/media/blackwolf08/Data/New Projects/Covid-19/COVID19/node_modules/react-native-input-credit-card/node_modules/card-validator/src/parse-date.js"],"names":["expirationYear","require","isArray","getNumberOfMonthDigitsInDateString","dateString","firstCharacter","Number","assumedYear","substr","isPotentiallyValid","length","parseDate","date","month","numberOfDigitsInMonth","test","split","reverse","year","slice","join","module","exports"],"mappings":"AAAA,aAEA,GAAIA,CAAAA,cAAc,CAAGC,OAAO,qBAA5B,CACA,GAAIC,CAAAA,OAAO,CAAGD,OAAO,kBAArB,CAEA,QAASE,CAAAA,kCAAT,CAA4CC,UAA5C,CAAwD,CACtD,GAAIC,CAAAA,cAAc,CAAGC,MAAM,CAACF,UAAU,CAAC,CAAD,CAAX,CAA3B,CACA,GAAIG,CAAAA,WAAJ,CAQA,GAAIF,cAAc,GAAK,CAAvB,CAA0B,CACxB,MAAO,EAAP,CACD,CAQD,GAAIA,cAAc,CAAG,CAArB,CAAwB,CACtB,MAAO,EAAP,CACD,CAQD,GAAIA,cAAc,GAAK,CAAnB,EAAwBC,MAAM,CAACF,UAAU,CAAC,CAAD,CAAX,CAAN,CAAwB,CAApD,CAAuD,CACrD,MAAO,EAAP,CACD,CAaD,GAAIC,cAAc,GAAK,CAAvB,CAA0B,CACxBE,WAAW,CAAGH,UAAU,CAACI,MAAX,CAAkB,CAAlB,CAAd,CAEA,MAAOR,CAAAA,cAAc,CAACO,WAAD,CAAd,CAA4BE,kBAA5B,CAAiD,CAAjD,CAAqD,CAA5D,CACD,CASD,GAAIL,UAAU,CAACM,MAAX,GAAsB,CAA1B,CAA6B,CAC3B,MAAO,EAAP,CACD,CASD,GAAIN,UAAU,CAACM,MAAX,CAAoB,CAAxB,CAA2B,CACzB,MAAO,EAAP,CACD,CAKD,MAAO,EAAP,CACD,CAED,QAASC,CAAAA,SAAT,CAAmBC,IAAnB,CAAyB,CACvB,GAAIC,CAAAA,KAAJ,CAAWC,qBAAX,CAEA,GAAI,kBAAkBC,IAAlB,CAAuBH,IAAvB,CAAJ,CAAkC,CAChCA,IAAI,CAAGA,IAAI,CAACI,KAAL,CAAW,GAAX,EAAgBC,OAAhB,EAAP,CACD,CAFD,IAEO,IAAI,KAAKF,IAAL,CAAUH,IAAV,CAAJ,CAAqB,CAC1BA,IAAI,CAAGA,IAAI,CAACI,KAAL,CAAW,WAAX,CAAP,CACD,CAFM,IAEA,IAAI,KAAKD,IAAL,CAAUH,IAAV,CAAJ,CAAqB,CAC1BA,IAAI,CAAGA,IAAI,CAACI,KAAL,CAAW,KAAX,CAAP,CACD,CAED,GAAId,OAAO,CAACU,IAAD,CAAX,CAAmB,CACjB,MAAO,CACLC,KAAK,CAAED,IAAI,CAAC,CAAD,CAAJ,EAAW,EADb,CAELM,IAAI,CAAEN,IAAI,CAACO,KAAL,CAAW,CAAX,EAAcC,IAAd,EAFD,CAAP,CAID,CAEDN,qBAAqB,CAAGX,kCAAkC,CAACS,IAAD,CAA1D,CAEAC,KAAK,CAAGD,IAAI,CAACJ,MAAL,CAAY,CAAZ,CAAeM,qBAAf,CAAR,CAEA,MAAO,CACLD,KAAK,CAAEA,KADF,CAELK,IAAI,CAAEN,IAAI,CAACJ,MAAL,CAAYK,KAAK,CAACH,MAAlB,CAFD,CAAP,CAID,CAEDW,MAAM,CAACC,OAAP,CAAiBX,SAAjB","sourcesContent":["'use strict';\n\nvar expirationYear = require('./expiration-year');\nvar isArray = require('./lib/is-array');\n\nfunction getNumberOfMonthDigitsInDateString(dateString) {\n  var firstCharacter = Number(dateString[0]);\n  var assumedYear;\n\n  /*\n    if the first character in the string starts with `0`,\n    we know that the month will be 2 digits.\n\n    '0122' => {month: '01', year: '22'}\n  */\n  if (firstCharacter === 0) {\n    return 2;\n  }\n\n  /*\n    if the first character in the string starts with\n    number greater than 1, it must be a 1 digit month\n\n    '322' => {month: '3', year: '22'}\n  */\n  if (firstCharacter > 1) {\n    return 1;\n  }\n\n  /*\n    if the first 2 characters make up a number between\n    13-19, we know that the month portion must be 1\n\n    '139' => {month: '1', year: '39'}\n  */\n  if (firstCharacter === 1 && Number(dateString[1]) > 2) {\n    return 1;\n  }\n\n  /*\n    if the first 2 characters make up a number between\n    10-12, we check if the year portion would be considered\n    valid if we assumed that the month was 1. If it is\n    not potentially valid, we assume the month must have\n    2 digits.\n\n    '109' => {month: '10', year: '9'}\n    '120' => {month: '1', year: '20'} // when checked in the year 2019\n    '120' => {month: '12', year: '0'} // when checked in the year 2021\n  */\n  if (firstCharacter === 1) {\n    assumedYear = dateString.substr(1);\n\n    return expirationYear(assumedYear).isPotentiallyValid ? 1 : 2;\n  }\n\n  /*\n    If the length of the value is exactly 5 characters,\n    we assume a full year was passed in, meaning the remaining\n    single leading digit must be the month value.\n\n    '12202' => {month: '1', year: '2202'}\n  */\n  if (dateString.length === 5) {\n    return 1;\n  }\n\n  /*\n    If the length of the value is more than five characters,\n    we assume a full year was passed in addition to the month\n    and therefore the month portion must be 2 digits.\n\n    '112020' => {month: '11', year: '2020'}\n  */\n  if (dateString.length > 5) {\n    return 2;\n  }\n\n  /*\n    By default, the month value is the first value\n  */\n  return 1;\n}\n\nfunction parseDate(date) {\n  var month, numberOfDigitsInMonth;\n\n  if (/^\\d{4}-\\d{1,2}$/.test(date)) {\n    date = date.split('-').reverse();\n  } else if (/\\//.test(date)) {\n    date = date.split(/\\s*\\/\\s*/g);\n  } else if (/\\s/.test(date)) {\n    date = date.split(/ +/g);\n  }\n\n  if (isArray(date)) {\n    return {\n      month: date[0] || '',\n      year: date.slice(1).join()\n    };\n  }\n\n  numberOfDigitsInMonth = getNumberOfMonthDigitsInDateString(date);\n\n  month = date.substr(0, numberOfDigitsInMonth);\n\n  return {\n    month: month,\n    year: date.substr(month.length)\n  };\n}\n\nmodule.exports = parseDate;\n"]},"metadata":{},"sourceType":"script"}