{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _taggedTemplateLiteralLoose from\"@babel/runtime/helpers/taggedTemplateLiteralLoose\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _toArray from\"@babel/runtime/helpers/toArray\";function _templateObject2(){var data=_taggedTemplateLiteralLoose([\"M\",\",\",\" \"]);_templateObject2=function _templateObject2(){return data;};return data;}function _templateObject(){var data=_taggedTemplateLiteralLoose([\"\",\"C\",\",\",\" \",\",\",\" \",\",\",\"\"]);_templateObject=function _templateObject(){return data;};return data;}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import Animated from\"react-native-reanimated\";import parseSVG from\"parse-svg-path\";import absSVG from\"abs-svg-path\";import normalizeSVG from\"normalize-svg-path\";import{get}from\"./Array\";import{string}from\"./String\";import{cubicBezier}from\"./Math\";import cubicBezierLength from\"./bezier/CubicBezierLength\";import cubicBezierSolve from\"./bezier/CubicBezierSolve\";var Value=Animated.Value,lessOrEq=Animated.lessOrEq,greaterOrEq=Animated.greaterOrEq,and=Animated.and,cond=Animated.cond,interpolate=Animated.interpolate,multiply=Animated.multiply,lessThan=Animated.lessThan,concat=Animated.concat,add=Animated.add;var MX=1;var MY=2;var CX1=1;var CY1=2;var CX2=3;var CY2=4;var CX=5;var CY=6;export var parsePath=function parsePath(d){var _normalizeSVG=normalizeSVG(absSVG(parseSVG(d))),_normalizeSVG2=_toArray(_normalizeSVG),move=_normalizeSVG2[0],curves=_normalizeSVG2.slice(1);var parts=curves.map(function(curve,index){var prevCurve=curves[index-1];var p0=index===0?{x:move[MX],y:move[MY]}:{x:prevCurve[CX],y:prevCurve[CY]};var p1={x:curve[CX1],y:curve[CY1]};var p2={x:curve[CX2],y:curve[CY2]};var p3={x:curve[CX],y:curve[CY]};var length=cubicBezierLength(p0,p1,p2,p3);return{p0:p0,p1:p1,p2:p2,p3:p3,length:length};});var segments=parts.map(function(part,index){var start=parts.slice(0,index).reduce(function(acc,p){return acc+p.length;},0);var end=start+part.length;return{start:start,end:end,p0x:part.p0.x,p3x:part.p3.x};});return{segments:segments,totalLength:parts.reduce(function(acc,part){return acc+part.length;},0),length:parts.map(function(part){return part.length;}),start:segments.map(function(segment){return segment.start;}),end:segments.map(function(segment){return segment.end;}),p0x:parts.map(function(part){return part.p0.x;}),p0y:parts.map(function(part){return part.p0.y;}),p1x:parts.map(function(part){return part.p1.x;}),p1y:parts.map(function(part){return part.p1.y;}),p2x:parts.map(function(part){return part.p2.x;}),p2y:parts.map(function(part){return part.p2.y;}),p3x:parts.map(function(part){return part.p3.x;}),p3y:parts.map(function(part){return part.p3.y;})};};export var getPointAtLength=function getPointAtLength(path,length){var notFound=new Value(-1);var index=path.segments.reduce(function(acc,p,i){return cond(and(greaterOrEq(length,p.start),lessOrEq(length,p.end)),i,acc);},notFound);var start=get(path.start,index);var end=get(path.end,index);var p0x=get(path.p0x,index);var p1x=get(path.p1x,index);var p2x=get(path.p2x,index);var p3x=get(path.p3x,index);var p0y=get(path.p0y,index);var p1y=get(path.p1y,index);var p2y=get(path.p2y,index);var p3y=get(path.p3y,index);var t=interpolate(length,{inputRange:[start,end],outputRange:[0,1]});return{x:cubicBezier(t,p0x,p1x,p2x,p3x),y:cubicBezier(t,p0y,p1y,p2y,p3y)};};export var interpolatePath=function interpolatePath(value,_ref){var inputRange=_ref.inputRange,outputRange=_ref.outputRange,config=_objectWithoutProperties(_ref,[\"inputRange\",\"outputRange\"]);var paths=outputRange.map(function(path){return typeof path===\"string\"?parsePath(path):path;});var path=paths[0];var commands=path.segments.map(function(_,index){var interpolatePoint=function interpolatePoint(point){return interpolate(value,_objectSpread({inputRange:inputRange,outputRange:paths.map(function(p){return p[point][index];})},config));};var mx=interpolatePoint(\"p0x\");var my=interpolatePoint(\"p0y\");var p1x=interpolatePoint(\"p1x\");var p1y=interpolatePoint(\"p1y\");var p2x=interpolatePoint(\"p2x\");var p2y=interpolatePoint(\"p2y\");var p3x=interpolatePoint(\"p3x\");var p3y=interpolatePoint(\"p3y\");return string(_templateObject(),index===0?string(_templateObject2(),mx,my):\"\",p1x,p1y,p2x,p2y,p3x,p3y);});return concat.apply(void 0,_toConsumableArray(commands));};export var bInterpolatePath=function bInterpolatePath(value,path1,path2){return interpolatePath(value,{inputRange:[0,1],outputRange:[path1,path2]});};export var getLengthAtX=function getLengthAtX(path,x){var notFound=new Value(-1);var index=path.segments.reduce(function(acc,p,i){return cond(and(greaterOrEq(x,p.p0x),lessOrEq(x,p.p3x)),i,acc);},notFound);var p0=get(path.p0x,index);var p1=get(path.p1x,index);var p2=get(path.p2x,index);var p3=get(path.p3x,index);var t=cubicBezierSolve(p0,p1,p2,p3);var length=get(path.length,index);var start=add.apply(void 0,_toConsumableArray(path.length.map(function(l,i){return cond(lessThan(i,index),l,0);})));return add(start,multiply(t,length));};","map":{"version":3,"sources":["SVG.ts"],"names":["Value","lessOrEq","greaterOrEq","and","cond","interpolate","multiply","lessThan","concat","add","Animated","MX","MY","CX1","CY1","CX2","CY2","CX","CY","parsePath","move","curves","normalizeSVG","absSVG","parseSVG","parts","prevCurve","index","p0","x","y","p1","curve","p2","p3","length","cubicBezierLength","segments","start","acc","p","end","part","p0x","p3x","totalLength","segment","p0y","p1x","p1y","p2x","p2y","p3y","getPointAtLength","notFound","path","get","t","inputRange","outputRange","cubicBezier","interpolatePath","config","paths","commands","interpolatePoint","mx","my","string","bInterpolatePath","getLengthAtX","cubicBezierSolve"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\nimport parseSVG from \"parse-svg-path\";\nimport absSVG from \"abs-svg-path\";\nimport normalizeSVG from \"normalize-svg-path\";\nimport { get } from \"./Array\";\nimport { string } from \"./String\";\nimport { cubicBezier } from \"./Math\";\nimport cubicBezierLength from \"./bezier/CubicBezierLength\";\nimport cubicBezierSolve from \"./bezier/CubicBezierSolve\";\n\nconst {\n  Value,\n  lessOrEq,\n  greaterOrEq,\n  and,\n  cond,\n  interpolate,\n  multiply,\n  lessThan,\n  concat,\n  add\n} = Animated;\n\n// const COMMAND = 0;\nconst MX = 1;\nconst MY = 2;\nconst CX1 = 1;\nconst CY1 = 2;\nconst CX2 = 3;\nconst CY2 = 4;\nconst CX = 5;\nconst CY = 6;\n\ntype SVGMoveCommand = [\"M\", number, number];\ntype SVGCurveCommand = [\"C\", number, number, number, number, number, number];\ntype SVGNormalizedCommands = [SVGMoveCommand, ...SVGCurveCommand[]];\ntype BezierPoint =\n  | \"p0x\"\n  | \"p0y\"\n  | \"p1x\"\n  | \"p1y\"\n  | \"p2x\"\n  | \"p2y\"\n  | \"p3x\"\n  | \"p3y\";\n\ninterface Point {\n  x: number;\n  y: number;\n}\n\ninterface BezierCubicCurve {\n  length: number;\n  p0: Point;\n  p1: Point;\n  p2: Point;\n  p3: Point;\n}\n\nexport interface PathInterpolationConfig {\n  inputRange: readonly Animated.Adaptable<number>[];\n  outputRange: readonly (ReanimatedPath | string)[];\n  extrapolate?: Animated.Extrapolate;\n  extrapolateLeft?: Animated.Extrapolate;\n  extrapolateRight?: Animated.Extrapolate;\n}\n\nexport interface ReanimatedPath {\n  totalLength: number;\n  segments: { start: number; end: number; p0x: number; p3x: number }[];\n  length: number[];\n  start: number[];\n  end: number[];\n  p0x: number[];\n  p0y: number[];\n  p1x: number[];\n  p1y: number[];\n  p2x: number[];\n  p2y: number[];\n  p3x: number[];\n  p3y: number[];\n}\n\nexport const parsePath = (d: string): ReanimatedPath => {\n  const [move, ...curves]: SVGNormalizedCommands = normalizeSVG(\n    absSVG(parseSVG(d))\n  );\n  const parts: BezierCubicCurve[] = curves.map((curve, index) => {\n    const prevCurve = curves[index - 1];\n    const p0 =\n      index === 0\n        ? { x: move[MX], y: move[MY] }\n        : { x: prevCurve[CX], y: prevCurve[CY] };\n    const p1 = { x: curve[CX1], y: curve[CY1] };\n    const p2 = { x: curve[CX2], y: curve[CY2] };\n    const p3 = { x: curve[CX], y: curve[CY] };\n    const length = cubicBezierLength(p0, p1, p2, p3);\n    return {\n      p0,\n      p1,\n      p2,\n      p3,\n      length\n    };\n  });\n  const segments = parts.map((part, index) => {\n    const start = parts.slice(0, index).reduce((acc, p) => acc + p.length, 0);\n    const end = start + part.length;\n    return {\n      start,\n      end,\n      p0x: part.p0.x,\n      p3x: part.p3.x\n    };\n  });\n  return {\n    segments,\n    totalLength: parts.reduce((acc, part) => acc + part.length, 0),\n    length: parts.map(part => part.length),\n    start: segments.map(segment => segment.start),\n    end: segments.map(segment => segment.end),\n    p0x: parts.map(part => part.p0.x),\n    p0y: parts.map(part => part.p0.y),\n    p1x: parts.map(part => part.p1.x),\n    p1y: parts.map(part => part.p1.y),\n    p2x: parts.map(part => part.p2.x),\n    p2y: parts.map(part => part.p2.y),\n    p3x: parts.map(part => part.p3.x),\n    p3y: parts.map(part => part.p3.y)\n  };\n};\n\nexport const getPointAtLength = (\n  path: ReanimatedPath,\n  length: Animated.Adaptable<number>\n): { x: Animated.Node<number>; y: Animated.Node<number> } => {\n  const notFound: Animated.Node<number> = new Value(-1);\n  const index = path.segments.reduce(\n    (acc, p, i) =>\n      cond(and(greaterOrEq(length, p.start), lessOrEq(length, p.end)), i, acc),\n    notFound\n  );\n  const start = get(path.start, index);\n  const end = get(path.end, index);\n\n  const p0x = get(path.p0x, index);\n  const p1x = get(path.p1x, index);\n  const p2x = get(path.p2x, index);\n  const p3x = get(path.p3x, index);\n\n  const p0y = get(path.p0y, index);\n  const p1y = get(path.p1y, index);\n  const p2y = get(path.p2y, index);\n  const p3y = get(path.p3y, index);\n  const t = interpolate(length, {\n    inputRange: [start, end],\n    outputRange: [0, 1]\n  });\n  return {\n    x: cubicBezier(t, p0x, p1x, p2x, p3x),\n    y: cubicBezier(t, p0y, p1y, p2y, p3y)\n  };\n};\n\nexport const interpolatePath = (\n  value: Animated.Adaptable<number>,\n  { inputRange, outputRange, ...config }: PathInterpolationConfig\n): Animated.Node<string> => {\n  const paths = outputRange.map(path =>\n    typeof path === \"string\" ? parsePath(path) : path\n  );\n  const path = paths[0];\n  const commands = path.segments.map((_, index) => {\n    const interpolatePoint = (point: BezierPoint) =>\n      interpolate(value, {\n        inputRange,\n        outputRange: paths.map(p => p[point][index]),\n        ...config\n      });\n\n    const mx = interpolatePoint(\"p0x\");\n    const my = interpolatePoint(\"p0y\");\n\n    const p1x = interpolatePoint(\"p1x\");\n    const p1y = interpolatePoint(\"p1y\");\n\n    const p2x = interpolatePoint(\"p2x\");\n    const p2y = interpolatePoint(\"p2y\");\n\n    const p3x = interpolatePoint(\"p3x\");\n    const p3y = interpolatePoint(\"p3y\");\n\n    return string`${\n      index === 0 ? string`M${mx},${my} ` : \"\"\n    }C${p1x},${p1y} ${p2x},${p2y} ${p3x},${p3y}`;\n  });\n  return concat(...commands);\n};\n\nexport const bInterpolatePath = (\n  value: Animated.Value<number>,\n  path1: ReanimatedPath | string,\n  path2: ReanimatedPath | string\n): Animated.Node<string> =>\n  interpolatePath(value, {\n    inputRange: [0, 1],\n    outputRange: [path1, path2]\n  });\n\n// https://pomax.github.io/bezierinfo/#yforx\nexport const getLengthAtX = (\n  path: ReanimatedPath,\n  x: Animated.Adaptable<number>\n): Animated.Node<number> => {\n  const notFound: Animated.Node<number> = new Value(-1);\n  const index = path.segments.reduce(\n    (acc, p, i) => cond(and(greaterOrEq(x, p.p0x), lessOrEq(x, p.p3x)), i, acc),\n    notFound\n  );\n  const p0 = get(path.p0x, index);\n  const p1 = get(path.p1x, index);\n  const p2 = get(path.p2x, index);\n  const p3 = get(path.p3x, index);\n  const t = cubicBezierSolve(p0, p1, p2, p3);\n  const length = get(path.length, index);\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  const start = add(\n    ...(path.length.map((l, i) => cond(lessThan(i, index), l, 0)) as [\n      any,\n      any,\n      ...any[]\n    ])\n  );\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  return add(start, multiply(t, length));\n};\n"]},"metadata":{},"sourceType":"module"}