{"ast":null,"code":"import Animated from\"react-native-reanimated\";import{find}from\"../Array\";import{approximates}from\"../Math\";var Value=Animated.Value,and=Animated.and,cond=Animated.cond,divide=Animated.divide,add=Animated.add,multiply=Animated.multiply,block=Animated.block,greaterThan=Animated.greaterThan,eq=Animated.eq,lessThan=Animated.lessThan,pow=Animated.pow,sqrt=Animated.sqrt,set=Animated.set,sub=Animated.sub,cos=Animated.cos,not=Animated.not,acos=Animated.acos;var isRootValidForCubicBezier=function isRootValidForCubicBezier(root){return and(greaterThan(root,0),lessThan(root,1));};var cuberoot=function cuberoot(v){return cond(lessThan(v,0),multiply(pow(multiply(v,-1),1/3),-1),pow(v,1/3));};var cubicBezierSolve=function cubicBezierSolve(pa,pb,pc,pd){var a=new Value();var b=new Value();var c=new Value();var d=new Value();var root1=new Value();var root2=new Value();var root3=new Value();var q=new Value();var q2=new Value();var p=new Value();var p3=new Value();var discriminant=new Value();var mp3=new Value();var mp33=new Value();var r=new Value();var t=new Value();var cosphi=new Value();var phi=new Value();var crtr=new Value();var t1=new Value();var u1=new Value();var sd=new Value();var v1=new Value();var sq=new Value();return block([set(a,add(multiply(3,pa),multiply(-6,pb),multiply(3,pc))),set(b,add(multiply(-3,pa),multiply(3,pb))),set(c,pa),set(d,add(multiply(-1,pa),multiply(3,pb),multiply(-3,pc),pd)),cond(approximates(d,0),cond(approximates(d,0),cond(not(approximates(b,0)),set(root1,divide(multiply(-1,c),b)),[set(q,sqrt(sub(pow(b,2),multiply(4,a,c)))),set(root1,divide(sub(q,b),multiply(2,a))),set(root2,divide(sub(multiply(b,-1),q),multiply(2,a)))])),[set(a,divide(a,d)),set(b,divide(b,d)),set(c,divide(c,d)),set(p,divide(sub(multiply(3,b),multiply(a,a)),3)),set(p3,divide(p,3)),set(q,divide(add(multiply(2,a,a,a),multiply(-9,a,b),multiply(27,c)),27)),set(q2,divide(q,2)),set(discriminant,add(multiply(q2,q2),multiply(p3,p3,p3))),cond(lessThan(discriminant,0),[set(mp3,divide(multiply(p,-1),3)),set(mp33,multiply(mp3,mp3,mp3)),set(r,sqrt(mp33)),set(t,divide(multiply(q,-1),multiply(2,r))),set(cosphi,cond(lessThan(t,-1),-1,cond(greaterThan(t,1),1,t))),set(phi,acos(cosphi)),set(crtr,cuberoot(r)),set(t1,multiply(2,crtr)),set(root1,sub(multiply(t1,cos(divide(phi,3))),divide(a,3))),set(root2,sub(multiply(t1,cos(divide(add(phi,2*Math.PI),3))),divide(a,3))),set(root3,sub(multiply(t1,cos(divide(add(phi,4*Math.PI),3))),divide(a,3)))],cond(eq(discriminant,0),[set(u1,cond(lessThan(q2,0),cuberoot(multiply(q2,-1)),multiply(cuberoot(q2),-1))),set(root1,sub(multiply(2,u1),divide(a,3))),set(root2,sub(multiply(-1,u1),divide(a,3)))],[set(sd,sqrt(discriminant)),set(u1,cuberoot(sub(sq,q2))),set(v1,cuberoot(add(sq,q2))),set(root1,sub(u1,v1,divide(a,3)))]))]),find([root1,root2,root3],isRootValidForCubicBezier)]);};export default cubicBezierSolve;","map":{"version":3,"sources":["CubicBezierSolve.ts"],"names":["Value","and","cond","divide","add","multiply","block","greaterThan","eq","lessThan","pow","sqrt","set","sub","cos","not","acos","Animated","isRootValidForCubicBezier","cuberoot","cubicBezierSolve","a","b","c","d","root1","root2","root3","q","q2","p","p3","discriminant","mp3","mp33","r","t","cosphi","phi","crtr","t1","u1","sd","v1","sq","approximates","Math","find"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\n\nimport { find } from \"../Array\";\nimport { approximates } from \"../Math\";\n\nconst {\n  Value,\n  and,\n  cond,\n  divide,\n  add,\n  multiply,\n  block,\n  greaterThan,\n  eq,\n  lessThan,\n  pow,\n  sqrt,\n  set,\n  sub,\n  cos,\n  not,\n  acos\n} = Animated;\n\nconst isRootValidForCubicBezier = (root: Animated.Node<number>) =>\n  and(greaterThan(root, 0), lessThan(root, 1));\n\n// pomax.github.io/bezierinfo/#extremities\nconst cuberoot = (v: Animated.Adaptable<number>) =>\n  cond(\n    lessThan(v, 0),\n    multiply(pow(multiply(v, -1), 1 / 3), -1),\n    pow(v, 1 / 3)\n  );\n\nconst cubicBezierSolve = (\n  pa: Animated.Adaptable<number>,\n  pb: Animated.Adaptable<number>,\n  pc: Animated.Adaptable<number>,\n  pd: Animated.Adaptable<number>\n): Animated.Node<number> => {\n  const a: Animated.Value<number> = new Value();\n  const b: Animated.Value<number> = new Value();\n  const c: Animated.Value<number> = new Value();\n  const d: Animated.Value<number> = new Value();\n  const root1: Animated.Value<number> = new Value();\n  const root2: Animated.Value<number> = new Value();\n  const root3: Animated.Value<number> = new Value();\n\n  const q: Animated.Value<number> = new Value();\n  const q2: Animated.Value<number> = new Value();\n  const p: Animated.Value<number> = new Value();\n  const p3: Animated.Value<number> = new Value();\n  const discriminant: Animated.Value<number> = new Value();\n\n  const mp3: Animated.Value<number> = new Value();\n  const mp33: Animated.Value<number> = new Value();\n  const r: Animated.Value<number> = new Value();\n  const t: Animated.Value<number> = new Value();\n  const cosphi: Animated.Value<number> = new Value();\n  const phi: Animated.Value<number> = new Value();\n  const crtr: Animated.Value<number> = new Value();\n  const t1: Animated.Value<number> = new Value();\n\n  const u1: Animated.Value<number> = new Value();\n\n  const sd: Animated.Value<number> = new Value();\n  const v1: Animated.Value<number> = new Value();\n  const sq: Animated.Value<number> = new Value();\n\n  return block([\n    set(a, add(multiply(3, pa), multiply(-6, pb), multiply(3, pc))),\n    set(b, add(multiply(-3, pa), multiply(3, pb))),\n    set(c, pa),\n    set(d, add(multiply(-1, pa), multiply(3, pb), multiply(-3, pc), pd)),\n    cond(\n      approximates(d, 0),\n      cond(\n        approximates(d, 0),\n        cond(not(approximates(b, 0)), set(root1, divide(multiply(-1, c), b)), [\n          set(q, sqrt(sub(pow(b, 2), multiply(4, a, c)))),\n          set(root1, divide(sub(q, b), multiply(2, a))),\n          set(root2, divide(sub(multiply(b, -1), q), multiply(2, a)))\n        ])\n      ),\n      [\n        set(a, divide(a, d)),\n        set(b, divide(b, d)),\n        set(c, divide(c, d)),\n        set(p, divide(sub(multiply(3, b), multiply(a, a)), 3)),\n        set(p3, divide(p, 3)),\n        set(\n          q,\n          divide(\n            add(multiply(2, a, a, a), multiply(-9, a, b), multiply(27, c)),\n            27\n          )\n        ),\n        set(q2, divide(q, 2)),\n        set(discriminant, add(multiply(q2, q2), multiply(p3, p3, p3))),\n        cond(\n          lessThan(discriminant, 0),\n          [\n            set(mp3, divide(multiply(p, -1), 3)),\n            set(mp33, multiply(mp3, mp3, mp3)),\n            set(r, sqrt(mp33)),\n            set(t, divide(multiply(q, -1), multiply(2, r))),\n            set(\n              cosphi,\n              cond(lessThan(t, -1), -1, cond(greaterThan(t, 1), 1, t))\n            ),\n            set(phi, acos(cosphi)),\n            set(crtr, cuberoot(r)),\n            set(t1, multiply(2, crtr)),\n            set(root1, sub(multiply(t1, cos(divide(phi, 3))), divide(a, 3))),\n            set(\n              root2,\n              sub(\n                multiply(t1, cos(divide(add(phi, 2 * Math.PI), 3))),\n                divide(a, 3)\n              )\n            ),\n            set(\n              root3,\n              sub(\n                multiply(t1, cos(divide(add(phi, 4 * Math.PI), 3))),\n                divide(a, 3)\n              )\n            )\n          ],\n          cond(\n            eq(discriminant, 0),\n            [\n              set(\n                u1,\n                cond(\n                  lessThan(q2, 0),\n                  cuberoot(multiply(q2, -1)),\n                  multiply(cuberoot(q2), -1)\n                )\n              ),\n              set(root1, sub(multiply(2, u1), divide(a, 3))),\n              set(root2, sub(multiply(-1, u1), divide(a, 3)))\n            ],\n            [\n              set(sd, sqrt(discriminant)),\n              set(u1, cuberoot(sub(sq, q2))),\n              set(v1, cuberoot(add(sq, q2))),\n              set(root1, sub(u1, v1, divide(a, 3)))\n            ]\n          )\n        )\n      ]\n    ),\n    find([root1, root2, root3], isRootValidForCubicBezier)\n  ]);\n};\n\nexport default cubicBezierSolve;\n"]},"metadata":{},"sourceType":"module"}