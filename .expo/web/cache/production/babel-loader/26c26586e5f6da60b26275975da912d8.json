{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";function _createSuper(Derived){return function(){var Super=_getPrototypeOf(Derived),result;if(_isNativeReflectConstruct()){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}import{val}from\"../val\";import AnimatedNode from\"./AnimatedNode\";import{adapt}from\"../core/AnimatedBlock\";var AnimatedCond=function(_AnimatedNode){_inherits(AnimatedCond,_AnimatedNode);var _super=_createSuper(AnimatedCond);function AnimatedCond(condition,ifBlock,elseBlock){var _this;_classCallCheck(this,AnimatedCond);_this=_super.call(this,{type:'cond',cond:condition.__nodeID,ifBlock:ifBlock.__nodeID,elseBlock:elseBlock?elseBlock.__nodeID:undefined},[condition,ifBlock,elseBlock]);_this._condition=condition;_this._ifBlock=ifBlock;_this._elseBlock=elseBlock;return _this;}_createClass(AnimatedCond,[{key:\"__onEvaluate\",value:function __onEvaluate(){if(val(this._condition)){return val(this._ifBlock);}else{return this._elseBlock!==undefined?val(this._elseBlock):undefined;}}}]);return AnimatedCond;}(AnimatedNode);export function createAnimatedCond(cond,ifBlock,elseBlock){return new AnimatedCond(adapt(cond),adapt(ifBlock),elseBlock===undefined?undefined:adapt(elseBlock));}","map":{"version":3,"sources":["/media/blackwolf08/Data/New Projects/Covid-19/COVID19/node_modules/react-native-reanimated/src/core/AnimatedCond.js"],"names":["val","AnimatedNode","adapt","AnimatedCond","condition","ifBlock","elseBlock","type","cond","__nodeID","undefined","_condition","_ifBlock","_elseBlock","createAnimatedCond"],"mappings":"m7BAAA,OAASA,GAAT,cACA,MAAOC,CAAAA,YAAP,sBACA,OAASC,KAAT,6B,GAEMC,CAAAA,Y,qGAKJ,sBAAYC,SAAZ,CAAuBC,OAAvB,CAAgCC,SAAhC,CAA2C,8CACzC,uBACE,CACEC,IAAI,CAAE,MADR,CAEEC,IAAI,CAAEJ,SAAS,CAACK,QAFlB,CAGEJ,OAAO,CAAEA,OAAO,CAACI,QAHnB,CAIEH,SAAS,CAAEA,SAAS,CAAGA,SAAS,CAACG,QAAb,CAAwBC,SAJ9C,CADF,CAOE,CAACN,SAAD,CAAYC,OAAZ,CAAqBC,SAArB,CAPF,EASA,MAAKK,UAAL,CAAkBP,SAAlB,CACA,MAAKQ,QAAL,CAAgBP,OAAhB,CACA,MAAKQ,UAAL,CAAkBP,SAAlB,CAZyC,aAa1C,C,4EAEc,CACb,GAAIN,GAAG,CAAC,KAAKW,UAAN,CAAP,CAA0B,CACxB,MAAOX,CAAAA,GAAG,CAAC,KAAKY,QAAN,CAAV,CACD,CAFD,IAEO,CACL,MAAO,MAAKC,UAAL,GAAoBH,SAApB,CAAgCV,GAAG,CAAC,KAAKa,UAAN,CAAnC,CAAuDH,SAA9D,CACD,CACF,C,0BA1BwBT,Y,EA6B3B,MAAO,SAASa,CAAAA,kBAAT,CAA4BN,IAA5B,CAAkCH,OAAlC,CAA2CC,SAA3C,CAAsD,CAC3D,MAAO,IAAIH,CAAAA,YAAJ,CACLD,KAAK,CAACM,IAAD,CADA,CAELN,KAAK,CAACG,OAAD,CAFA,CAGLC,SAAS,GAAKI,SAAd,CAA0BA,SAA1B,CAAsCR,KAAK,CAACI,SAAD,CAHtC,CAAP,CAKD","sourcesContent":["import { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\nimport { adapt } from '../core/AnimatedBlock';\n\nclass AnimatedCond extends AnimatedNode {\n  _condition;\n  _ifBlock;\n  _elseBlock;\n\n  constructor(condition, ifBlock, elseBlock) {\n    super(\n      {\n        type: 'cond',\n        cond: condition.__nodeID,\n        ifBlock: ifBlock.__nodeID,\n        elseBlock: elseBlock ? elseBlock.__nodeID : undefined,\n      },\n      [condition, ifBlock, elseBlock]\n    );\n    this._condition = condition;\n    this._ifBlock = ifBlock;\n    this._elseBlock = elseBlock;\n  }\n\n  __onEvaluate() {\n    if (val(this._condition)) {\n      return val(this._ifBlock);\n    } else {\n      return this._elseBlock !== undefined ? val(this._elseBlock) : undefined;\n    }\n  }\n}\n\nexport function createAnimatedCond(cond, ifBlock, elseBlock) {\n  return new AnimatedCond(\n    adapt(cond),\n    adapt(ifBlock),\n    elseBlock === undefined ? undefined : adapt(elseBlock)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}