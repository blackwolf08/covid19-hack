{"ast":null,"code":"'use strict';var luhn10=require(\"./luhn-10\");var getCardTypes=require('credit-card-type');function verification(card,isPotentiallyValid,isValid){return{card:card,isPotentiallyValid:isPotentiallyValid,isValid:isValid};}function cardNumber(value,options){var potentialTypes,cardType,isPotentiallyValid,isValid,i,maxLength;options=options||{};if(typeof value==='number'){value=String(value);}if(typeof value!=='string'){return verification(null,false,false);}value=value.replace(/\\-|\\s/g,'');if(!/^\\d*$/.test(value)){return verification(null,false,false);}potentialTypes=getCardTypes(value);if(potentialTypes.length===0){return verification(null,false,false);}else if(potentialTypes.length!==1){return verification(null,true,false);}cardType=potentialTypes[0];if(options.maxLength&&value.length>options.maxLength){return verification(cardType,false,false);}if(cardType.type===getCardTypes.types.UNIONPAY&&options.luhnValidateUnionPay!==true){isValid=true;}else{isValid=luhn10(value);}maxLength=Math.max.apply(null,cardType.lengths);if(options.maxLength){maxLength=Math.min(options.maxLength,maxLength);}for(i=0;i<cardType.lengths.length;i++){if(cardType.lengths[i]===value.length){isPotentiallyValid=value.length<maxLength||isValid;return verification(cardType,isPotentiallyValid,isValid);}}return verification(cardType,value.length<maxLength,false);}module.exports=cardNumber;","map":{"version":3,"sources":["/media/blackwolf08/Data/New Projects/Covid-19/COVID19/node_modules/react-native-input-credit-card/node_modules/card-validator/src/card-number.js"],"names":["luhn10","require","getCardTypes","verification","card","isPotentiallyValid","isValid","cardNumber","value","options","potentialTypes","cardType","i","maxLength","String","replace","test","length","type","types","UNIONPAY","luhnValidateUnionPay","Math","max","apply","lengths","min","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar luhn10 = require('./luhn-10');\nvar getCardTypes = require('credit-card-type');\n\nfunction verification(card, isPotentiallyValid, isValid) {\n  return {card: card, isPotentiallyValid: isPotentiallyValid, isValid: isValid};\n}\n\nfunction cardNumber(value, options) {\n  var potentialTypes, cardType, isPotentiallyValid, isValid, i, maxLength;\n\n  options = options || {};\n\n  if (typeof value === 'number') {\n    value = String(value);\n  }\n\n  if (typeof value !== 'string') { return verification(null, false, false); }\n\n  value = value.replace(/\\-|\\s/g, '');\n\n  if (!/^\\d*$/.test(value)) { return verification(null, false, false); }\n\n  potentialTypes = getCardTypes(value);\n\n  if (potentialTypes.length === 0) {\n    return verification(null, false, false);\n  } else if (potentialTypes.length !== 1) {\n    return verification(null, true, false);\n  }\n\n  cardType = potentialTypes[0];\n\n  if (options.maxLength && value.length > options.maxLength) {\n    return verification(cardType, false, false);\n  }\n\n  if (cardType.type === getCardTypes.types.UNIONPAY && options.luhnValidateUnionPay !== true) {\n    isValid = true;\n  } else {\n    isValid = luhn10(value);\n  }\n\n  maxLength = Math.max.apply(null, cardType.lengths);\n  if (options.maxLength) {\n    maxLength = Math.min(options.maxLength, maxLength);\n  }\n\n  for (i = 0; i < cardType.lengths.length; i++) {\n    if (cardType.lengths[i] === value.length) {\n      isPotentiallyValid = value.length < maxLength || isValid;\n\n      return verification(cardType, isPotentiallyValid, isValid);\n    }\n  }\n\n  return verification(cardType, value.length < maxLength, false);\n}\n\nmodule.exports = cardNumber;\n"]},"metadata":{},"sourceType":"script"}