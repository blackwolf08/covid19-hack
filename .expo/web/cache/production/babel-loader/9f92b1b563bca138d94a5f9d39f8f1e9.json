{"ast":null,"code":"import{cond,sub,divide,multiply,add,block,set,greaterOrEq}from\"../base\";export default function timing(clock,state,config){var lastTime=cond(state.time,state.time,clock);var frameTime=add(state.frameTime,sub(clock,lastTime));var progress=config.easing(divide(state.frameTime,config.duration));var distanceLeft=sub(config.toValue,state.position);var fullDistance=divide(distanceLeft,sub(1,progress));var startPosition=sub(config.toValue,fullDistance);var nextProgress=config.easing(divide(frameTime,config.duration));var nextPosition=add(startPosition,multiply(fullDistance,nextProgress));return block([cond(greaterOrEq(frameTime,config.duration),[set(state.position,config.toValue),set(state.finished,1)],set(state.position,nextPosition)),set(state.frameTime,frameTime),set(state.time,clock)]);}","map":{"version":3,"sources":["/media/blackwolf08/Data/New Projects/Covid-19/COVID19/node_modules/react-native-reanimated/src/animations/timing.js"],"names":["cond","sub","divide","multiply","add","block","set","greaterOrEq","timing","clock","state","config","lastTime","time","frameTime","progress","easing","duration","distanceLeft","toValue","position","fullDistance","startPosition","nextProgress","nextPosition","finished"],"mappings":"AAAA,OACEA,IADF,CAEEC,GAFF,CAGEC,MAHF,CAIEC,QAJF,CAKEC,GALF,CAMEC,KANF,CAOEC,GAPF,CAQEC,WARF,eAWA,cAAe,SAASC,CAAAA,MAAT,CAAgBC,KAAhB,CAAuBC,KAAvB,CAA8BC,MAA9B,CAAsC,CACnD,GAAMC,CAAAA,QAAQ,CAAGZ,IAAI,CAACU,KAAK,CAACG,IAAP,CAAaH,KAAK,CAACG,IAAnB,CAAyBJ,KAAzB,CAArB,CACA,GAAMK,CAAAA,SAAS,CAAGV,GAAG,CAACM,KAAK,CAACI,SAAP,CAAkBb,GAAG,CAACQ,KAAD,CAAQG,QAAR,CAArB,CAArB,CAEA,GAAMG,CAAAA,QAAQ,CAAGJ,MAAM,CAACK,MAAP,CAAcd,MAAM,CAACQ,KAAK,CAACI,SAAP,CAAkBH,MAAM,CAACM,QAAzB,CAApB,CAAjB,CACA,GAAMC,CAAAA,YAAY,CAAGjB,GAAG,CAACU,MAAM,CAACQ,OAAR,CAAiBT,KAAK,CAACU,QAAvB,CAAxB,CACA,GAAMC,CAAAA,YAAY,CAAGnB,MAAM,CAACgB,YAAD,CAAejB,GAAG,CAAC,CAAD,CAAIc,QAAJ,CAAlB,CAA3B,CACA,GAAMO,CAAAA,aAAa,CAAGrB,GAAG,CAACU,MAAM,CAACQ,OAAR,CAAiBE,YAAjB,CAAzB,CACA,GAAME,CAAAA,YAAY,CAAGZ,MAAM,CAACK,MAAP,CAAcd,MAAM,CAACY,SAAD,CAAYH,MAAM,CAACM,QAAnB,CAApB,CAArB,CACA,GAAMO,CAAAA,YAAY,CAAGpB,GAAG,CAACkB,aAAD,CAAgBnB,QAAQ,CAACkB,YAAD,CAAeE,YAAf,CAAxB,CAAxB,CAEA,MAAOlB,CAAAA,KAAK,CAAC,CACXL,IAAI,CACFO,WAAW,CAACO,SAAD,CAAYH,MAAM,CAACM,QAAnB,CADT,CAEF,CAACX,GAAG,CAACI,KAAK,CAACU,QAAP,CAAiBT,MAAM,CAACQ,OAAxB,CAAJ,CAAsCb,GAAG,CAACI,KAAK,CAACe,QAAP,CAAiB,CAAjB,CAAzC,CAFE,CAGFnB,GAAG,CAACI,KAAK,CAACU,QAAP,CAAiBI,YAAjB,CAHD,CADO,CAMXlB,GAAG,CAACI,KAAK,CAACI,SAAP,CAAkBA,SAAlB,CANQ,CAOXR,GAAG,CAACI,KAAK,CAACG,IAAP,CAAaJ,KAAb,CAPQ,CAAD,CAAZ,CASD","sourcesContent":["import {\n  cond,\n  sub,\n  divide,\n  multiply,\n  add,\n  block,\n  set,\n  greaterOrEq,\n} from '../base';\n\nexport default function timing(clock, state, config) {\n  const lastTime = cond(state.time, state.time, clock);\n  const frameTime = add(state.frameTime, sub(clock, lastTime));\n\n  const progress = config.easing(divide(state.frameTime, config.duration));\n  const distanceLeft = sub(config.toValue, state.position);\n  const fullDistance = divide(distanceLeft, sub(1, progress));\n  const startPosition = sub(config.toValue, fullDistance);\n  const nextProgress = config.easing(divide(frameTime, config.duration));\n  const nextPosition = add(startPosition, multiply(fullDistance, nextProgress));\n\n  return block([\n    cond(\n      greaterOrEq(frameTime, config.duration),\n      [set(state.position, config.toValue), set(state.finished, 1)],\n      set(state.position, nextPosition)\n    ),\n    set(state.frameTime, frameTime),\n    set(state.time, clock),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}