{"ast":null,"code":"import{cond,sub,pow,divide,multiply,add,block,set,lessThan}from\"../base\";import{abs}from\"../derived\";var VELOCITY_EPS=5;export default function decay(clock,state,config){var lastTime=cond(state.time,state.time,clock);var deltaTime=sub(clock,lastTime);var kv=pow(config.deceleration,deltaTime);var kx=divide(multiply(config.deceleration,sub(1,kv)),sub(1,config.deceleration));var v0=divide(state.velocity,1000);var v=multiply(v0,kv,1000);var x=add(state.position,multiply(v0,kx));return block([set(state.position,x),set(state.velocity,v),set(state.time,clock),cond(lessThan(abs(v),VELOCITY_EPS),set(state.finished,1))]);}","map":{"version":3,"sources":["/media/blackwolf08/Data/New Projects/Covid-19/COVID19/node_modules/react-native-reanimated/src/animations/decay.js"],"names":["cond","sub","pow","divide","multiply","add","block","set","lessThan","abs","VELOCITY_EPS","decay","clock","state","config","lastTime","time","deltaTime","kv","deceleration","kx","v0","velocity","v","x","position","finished"],"mappings":"AAAA,OACEA,IADF,CAEEC,GAFF,CAGEC,GAHF,CAIEC,MAJF,CAKEC,QALF,CAMEC,GANF,CAOEC,KAPF,CAQEC,GARF,CASEC,QATF,eAWA,OAASC,GAAT,kBAEA,GAAMC,CAAAA,YAAY,CAAG,CAArB,CAEA,cAAe,SAASC,CAAAA,KAAT,CAAeC,KAAf,CAAsBC,KAAtB,CAA6BC,MAA7B,CAAqC,CAClD,GAAMC,CAAAA,QAAQ,CAAGf,IAAI,CAACa,KAAK,CAACG,IAAP,CAAaH,KAAK,CAACG,IAAnB,CAAyBJ,KAAzB,CAArB,CACA,GAAMK,CAAAA,SAAS,CAAGhB,GAAG,CAACW,KAAD,CAAQG,QAAR,CAArB,CAQA,GAAMG,CAAAA,EAAE,CAAGhB,GAAG,CAACY,MAAM,CAACK,YAAR,CAAsBF,SAAtB,CAAd,CACA,GAAMG,CAAAA,EAAE,CAAGjB,MAAM,CACfC,QAAQ,CAACU,MAAM,CAACK,YAAR,CAAsBlB,GAAG,CAAC,CAAD,CAAIiB,EAAJ,CAAzB,CADO,CAEfjB,GAAG,CAAC,CAAD,CAAIa,MAAM,CAACK,YAAX,CAFY,CAAjB,CAIA,GAAME,CAAAA,EAAE,CAAGlB,MAAM,CAACU,KAAK,CAACS,QAAP,CAAiB,IAAjB,CAAjB,CACA,GAAMC,CAAAA,CAAC,CAAGnB,QAAQ,CAACiB,EAAD,CAAKH,EAAL,CAAS,IAAT,CAAlB,CACA,GAAMM,CAAAA,CAAC,CAAGnB,GAAG,CAACQ,KAAK,CAACY,QAAP,CAAiBrB,QAAQ,CAACiB,EAAD,CAAKD,EAAL,CAAzB,CAAb,CACA,MAAOd,CAAAA,KAAK,CAAC,CACXC,GAAG,CAACM,KAAK,CAACY,QAAP,CAAiBD,CAAjB,CADQ,CAEXjB,GAAG,CAACM,KAAK,CAACS,QAAP,CAAiBC,CAAjB,CAFQ,CAGXhB,GAAG,CAACM,KAAK,CAACG,IAAP,CAAaJ,KAAb,CAHQ,CAIXZ,IAAI,CAACQ,QAAQ,CAACC,GAAG,CAACc,CAAD,CAAJ,CAASb,YAAT,CAAT,CAAiCH,GAAG,CAACM,KAAK,CAACa,QAAP,CAAiB,CAAjB,CAApC,CAJO,CAAD,CAAZ,CAMD","sourcesContent":["import {\n  cond,\n  sub,\n  pow,\n  divide,\n  multiply,\n  add,\n  block,\n  set,\n  lessThan,\n} from '../base';\nimport { abs } from '../derived';\n\nconst VELOCITY_EPS = 5;\n\nexport default function decay(clock, state, config) {\n  const lastTime = cond(state.time, state.time, clock);\n  const deltaTime = sub(clock, lastTime);\n\n  // v0 = v / 1000\n  // v = v0 * powf(deceleration, dt);\n  // v = v * 1000;\n\n  // x0 = x;\n  // x = x0 + v0 * deceleration * (1 - powf(deceleration, dt)) / (1 - deceleration)\n  const kv = pow(config.deceleration, deltaTime);\n  const kx = divide(\n    multiply(config.deceleration, sub(1, kv)),\n    sub(1, config.deceleration)\n  );\n  const v0 = divide(state.velocity, 1000);\n  const v = multiply(v0, kv, 1000);\n  const x = add(state.position, multiply(v0, kx));\n  return block([\n    set(state.position, x),\n    set(state.velocity, v),\n    set(state.time, clock),\n    cond(lessThan(abs(v), VELOCITY_EPS), set(state.finished, 1)),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}