{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";function _createSuper(Derived){return function(){var Super=_getPrototypeOf(Derived),result;if(_isNativeReflectConstruct()){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}import{val}from\"../val\";import AnimatedNode from\"./AnimatedNode\";import{createAnimatedBlock as block,adapt}from\"./AnimatedBlock\";import{createAnimatedCall as call}from\"./AnimatedCall\";var AnimatedDebug=function(_AnimatedNode){_inherits(AnimatedDebug,_AnimatedNode);var _super=_createSuper(AnimatedDebug);function AnimatedDebug(message,value){var _this;_classCallCheck(this,AnimatedDebug);_this=_super.call(this,{type:'debug',message:message,value:value.__nodeID},[value]);_this._message=message;_this._value=value;return _this;}_createClass(AnimatedDebug,[{key:\"__onEvaluate\",value:function __onEvaluate(){var value=val(this._value);console.log(this._message,value);return value;}}]);return AnimatedDebug;}(AnimatedNode);export function createAnimatedDebug(message,value){if(__DEV__){var runningInRemoteDebugger=typeof atob!=='undefined';var runningInExpoShell=global.Expo&&global.Expo.Constants.appOwnership!=='standalone';if(runningInRemoteDebugger||runningInExpoShell){return block([call([value],function(_ref){var _ref2=_slicedToArray(_ref,1),a=_ref2[0];return console.log(message+\" \"+a);}),value]);}else{return new AnimatedDebug(message,adapt(value));}}return value;}","map":{"version":3,"sources":["/media/blackwolf08/Data/New Projects/Covid-19/COVID19/node_modules/react-native-reanimated/src/core/AnimatedDebug.js"],"names":["val","AnimatedNode","createAnimatedBlock","block","adapt","createAnimatedCall","call","AnimatedDebug","message","value","type","__nodeID","_message","_value","console","log","createAnimatedDebug","__DEV__","runningInRemoteDebugger","atob","runningInExpoShell","global","Expo","Constants","appOwnership","a"],"mappings":"o/BAAA,OAASA,GAAT,cACA,MAAOC,CAAAA,YAAP,sBACA,OAASC,mBAAmB,GAAIC,CAAAA,KAAhC,CAAuCC,KAAvC,uBACA,OAASC,kBAAkB,GAAIC,CAAAA,IAA/B,sB,GAEMC,CAAAA,a,uGAIJ,uBAAYC,OAAZ,CAAqBC,KAArB,CAA4B,+CAC1B,uBAAM,CAAEC,IAAI,CAAE,OAAR,CAAiBF,OAAO,CAAPA,OAAjB,CAA0BC,KAAK,CAAEA,KAAK,CAACE,QAAvC,CAAN,CAAyD,CAACF,KAAD,CAAzD,EACA,MAAKG,QAAL,CAAgBJ,OAAhB,CACA,MAAKK,MAAL,CAAcJ,KAAd,CAH0B,aAI3B,C,6EAEc,CACb,GAAMA,CAAAA,KAAK,CAAGT,GAAG,CAAC,KAAKa,MAAN,CAAjB,CACAC,OAAO,CAACC,GAAR,CAAY,KAAKH,QAAjB,CAA2BH,KAA3B,EACA,MAAOA,CAAAA,KAAP,CACD,C,2BAdyBR,Y,EAiB5B,MAAO,SAASe,CAAAA,mBAAT,CAA6BR,OAA7B,CAAsCC,KAAtC,CAA6C,CAClD,GAAIQ,OAAJ,CAAa,CACX,GAAMC,CAAAA,uBAAuB,CAAG,MAAOC,CAAAA,IAAP,GAAgB,WAAhD,CAIA,GAAMC,CAAAA,kBAAkB,CACtBC,MAAM,CAACC,IAAP,EAAeD,MAAM,CAACC,IAAP,CAAYC,SAAZ,CAAsBC,YAAtB,GAAuC,YADxD,CAGA,GAAIN,uBAAuB,EAAIE,kBAA/B,CAAmD,CAGjD,MAAOjB,CAAAA,KAAK,CAAC,CACXG,IAAI,CAAC,CAACG,KAAD,CAAD,CAAU,gDAAEgB,CAAF,gBAASX,CAAAA,OAAO,CAACC,GAAR,CAAeP,OAAf,KAA0BiB,CAA1B,CAAT,EAAV,CADO,CAEXhB,KAFW,CAAD,CAAZ,CAID,CAPD,IAOO,CACL,MAAO,IAAIF,CAAAA,aAAJ,CAAkBC,OAAlB,CAA2BJ,KAAK,CAACK,KAAD,CAAhC,CAAP,CACD,CACF,CAED,MAAOA,CAAAA,KAAP,CACD","sourcesContent":["import { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\nimport { createAnimatedBlock as block, adapt } from './AnimatedBlock';\nimport { createAnimatedCall as call } from './AnimatedCall';\n\nclass AnimatedDebug extends AnimatedNode {\n  _message;\n  _value;\n\n  constructor(message, value) {\n    super({ type: 'debug', message, value: value.__nodeID }, [value]);\n    this._message = message;\n    this._value = value;\n  }\n\n  __onEvaluate() {\n    const value = val(this._value);\n    console.log(this._message, value);\n    return value;\n  }\n}\n\nexport function createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    const runningInRemoteDebugger = typeof atob !== 'undefined';\n    // hack to detect if app is running in remote debugger\n    // https://stackoverflow.com/questions/39022216\n\n    const runningInExpoShell =\n      global.Expo && global.Expo.Constants.appOwnership !== 'standalone';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      // When running in expo or remote debugger we use JS console.log to output variables\n      // otherwise we output to the native console using native debug node\n      return block([\n        call([value], ([a]) => console.log(`${message} ${a}`)),\n        value,\n      ]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  }\n  // Debugging is disabled in PROD\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}