{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";function _createSuper(Derived){return function(){var Super=_getPrototypeOf(Derived),result;if(_isNativeReflectConstruct()){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}import AnimatedNode from\"./AnimatedNode\";import{adapt}from\"../core/AnimatedBlock\";import{val}from\"../val\";var AnimatedConcat=function(_AnimatedNode){_inherits(AnimatedConcat,_AnimatedNode);var _super=_createSuper(AnimatedConcat);function AnimatedConcat(input){var _this;_classCallCheck(this,AnimatedConcat);_this=_super.call(this,{type:'concat',input:input.map(function(n){return n.__nodeID;})},input);_this._input=input;return _this;}_createClass(AnimatedConcat,[{key:\"__onEvaluate\",value:function __onEvaluate(){return this._input.reduce(function(prev,current){return prev+val(current);},'');}}]);return AnimatedConcat;}(AnimatedNode);export function createAnimatedConcat(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return new AnimatedConcat(args.map(adapt));}","map":{"version":3,"sources":["/media/blackwolf08/Data/New Projects/Covid-19/COVID19/node_modules/react-native-reanimated/src/core/AnimatedConcat.js"],"names":["AnimatedNode","adapt","val","AnimatedConcat","input","type","map","n","__nodeID","_input","reduce","prev","current","createAnimatedConcat","args"],"mappings":"m7BAAA,MAAOA,CAAAA,YAAP,sBACA,OAASC,KAAT,6BACA,OAASC,GAAT,c,GAEMC,CAAAA,c,yGACJ,wBAAYC,KAAZ,CAAmB,gDACjB,uBAAM,CAAEC,IAAI,CAAE,QAAR,CAAkBD,KAAK,CAAEA,KAAK,CAACE,GAAN,CAAU,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACC,QAAN,EAAX,CAAzB,CAAN,CAA6DJ,KAA7D,EACA,MAAKK,MAAL,CAAcL,KAAd,CAFiB,aAGlB,C,8EAEc,CACb,MAAO,MAAKK,MAAL,CAAYC,MAAZ,CAAmB,SAACC,IAAD,CAAOC,OAAP,QAAmBD,CAAAA,IAAI,CAAGT,GAAG,CAACU,OAAD,CAA7B,EAAnB,CAA2D,EAA3D,CAAP,CACD,C,4BAR0BZ,Y,EAW7B,MAAO,SAASa,CAAAA,oBAAT,EAAuC,+BAANC,IAAM,0CAANA,IAAM,wBAC5C,MAAO,IAAIX,CAAAA,cAAJ,CAAmBW,IAAI,CAACR,GAAL,CAASL,KAAT,CAAnB,CAAP,CACD","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { adapt } from '../core/AnimatedBlock';\nimport { val } from '../val';\n\nclass AnimatedConcat extends AnimatedNode {\n  constructor(input) {\n    super({ type: 'concat', input: input.map(n => n.__nodeID) }, input);\n    this._input = input;\n  }\n\n  __onEvaluate() {\n    return this._input.reduce((prev, current) => prev + val(current), '');\n  }\n}\n\nexport function createAnimatedConcat(...args) {\n  return new AnimatedConcat(args.map(adapt));\n}\n"]},"metadata":{},"sourceType":"module"}