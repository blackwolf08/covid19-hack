{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import valid from\"card-validator\";import pick from\"lodash.pick\";import values from\"lodash.values\";import every from\"lodash.every\";var toStatus=function toStatus(validation){return validation.isValid?\"valid\":validation.isPotentiallyValid?\"incomplete\":\"invalid\";};var FALLBACK_CARD={gaps:[4,8,12],lengths:[16],code:{size:3}};var CCFieldValidator=function CCFieldValidator(displayedFields,validatePostalCode){var _this=this;_classCallCheck(this,CCFieldValidator);this.validateValues=function(formValues){var numberValidation=valid.number(formValues.number);var expiryValidation=valid.expirationDate(formValues.expiry);var maxCVCLength=(numberValidation.card||FALLBACK_CARD).code.size;var cvcValidation=valid.cvv(formValues.cvc,maxCVCLength);var validationStatuses=pick({number:toStatus(numberValidation),expiry:toStatus(expiryValidation),cvc:toStatus(cvcValidation),name:!!formValues.name?\"valid\":\"incomplete\",postalCode:_this._validatePostalCode(formValues.postalCode)},_this._displayedFields);return{valid:every(values(validationStatuses),function(status){return status===\"valid\";}),status:validationStatuses};};this._displayedFields=displayedFields;this._validatePostalCode=validatePostalCode;};export{CCFieldValidator as default};","map":{"version":3,"sources":["/media/blackwolf08/Data/New Projects/Covid-19/COVID19/node_modules/react-native-input-credit-card/src/CCFieldValidator.js"],"names":["valid","pick","values","every","toStatus","validation","isValid","isPotentiallyValid","FALLBACK_CARD","gaps","lengths","code","size","CCFieldValidator","displayedFields","validatePostalCode","validateValues","formValues","numberValidation","number","expiryValidation","expirationDate","expiry","maxCVCLength","card","cvcValidation","cvv","cvc","validationStatuses","name","postalCode","_validatePostalCode","_displayedFields","status"],"mappings":"mEAAA,MAAOA,CAAAA,KAAP,KAAkB,gBAAlB,CACA,MAAOC,CAAAA,IAAP,KAAiB,aAAjB,CACA,MAAOC,CAAAA,MAAP,KAAmB,eAAnB,CACA,MAAOC,CAAAA,KAAP,KAAkB,cAAlB,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,UAAU,CAAI,CAC7B,MAAOA,CAAAA,UAAU,CAACC,OAAX,CAAqB,OAArB,CACAD,UAAU,CAACE,kBAAX,CAAgC,YAAhC,CACA,SAFP,CAGD,CAJD,CAMA,GAAMC,CAAAA,aAAa,CAAG,CAAEC,IAAI,CAAE,CAAC,CAAD,CAAI,CAAJ,CAAO,EAAP,CAAR,CAAoBC,OAAO,CAAE,CAAC,EAAD,CAA7B,CAAmCC,IAAI,CAAE,CAAEC,IAAI,CAAE,CAAR,CAAzC,CAAtB,C,GACqBC,CAAAA,gB,CACnB,0BAAYC,eAAZ,CAA6BC,kBAA7B,CAAiD,4DAKjDC,cALiD,CAKhC,SAACC,UAAD,CAAgB,CAC/B,GAAMC,CAAAA,gBAAgB,CAAGlB,KAAK,CAACmB,MAAN,CAAaF,UAAU,CAACE,MAAxB,CAAzB,CACA,GAAMC,CAAAA,gBAAgB,CAAGpB,KAAK,CAACqB,cAAN,CAAqBJ,UAAU,CAACK,MAAhC,CAAzB,CACA,GAAMC,CAAAA,YAAY,CAAG,CAACL,gBAAgB,CAACM,IAAjB,EAAyBhB,aAA1B,EAAyCG,IAAzC,CAA8CC,IAAnE,CACA,GAAMa,CAAAA,aAAa,CAAGzB,KAAK,CAAC0B,GAAN,CAAUT,UAAU,CAACU,GAArB,CAA0BJ,YAA1B,CAAtB,CAEA,GAAMK,CAAAA,kBAAkB,CAAG3B,IAAI,CAAC,CAC9BkB,MAAM,CAAEf,QAAQ,CAACc,gBAAD,CADc,CAE9BI,MAAM,CAAElB,QAAQ,CAACgB,gBAAD,CAFc,CAG9BO,GAAG,CAAEvB,QAAQ,CAACqB,aAAD,CAHiB,CAI9BI,IAAI,CAAE,CAAC,CAACZ,UAAU,CAACY,IAAb,CAAoB,OAApB,CAA8B,YAJN,CAK9BC,UAAU,CAAE,KAAI,CAACC,mBAAL,CAAyBd,UAAU,CAACa,UAApC,CALkB,CAAD,CAM5B,KAAI,CAACE,gBANuB,CAA/B,CAQA,MAAO,CACLhC,KAAK,CAAEG,KAAK,CAACD,MAAM,CAAC0B,kBAAD,CAAP,CAA6B,SAAAK,MAAM,QAAIA,CAAAA,MAAM,GAAK,OAAf,EAAnC,CADP,CAELA,MAAM,CAAEL,kBAFH,CAAP,CAID,CAvBgD,CAC/C,KAAKI,gBAAL,CAAwBlB,eAAxB,CACA,KAAKiB,mBAAL,CAA2BhB,kBAA3B,CACD,C,QAJkBF,gB","sourcesContent":["import valid from \"card-validator\";\nimport pick from \"lodash.pick\";\nimport values from \"lodash.values\";\nimport every from \"lodash.every\";\n\nconst toStatus = validation => {\n  return validation.isValid ? \"valid\" :\n         validation.isPotentiallyValid ? \"incomplete\" :\n         \"invalid\";\n};\n\nconst FALLBACK_CARD = { gaps: [4, 8, 12], lengths: [16], code: { size: 3 } };\nexport default class CCFieldValidator {\n  constructor(displayedFields, validatePostalCode) {\n    this._displayedFields = displayedFields;\n    this._validatePostalCode = validatePostalCode;\n  }\n\n  validateValues = (formValues) => {\n    const numberValidation = valid.number(formValues.number);\n    const expiryValidation = valid.expirationDate(formValues.expiry);\n    const maxCVCLength = (numberValidation.card || FALLBACK_CARD).code.size;\n    const cvcValidation = valid.cvv(formValues.cvc, maxCVCLength);\n\n    const validationStatuses = pick({\n      number: toStatus(numberValidation),\n      expiry: toStatus(expiryValidation),\n      cvc: toStatus(cvcValidation),\n      name: !!formValues.name ? \"valid\" : \"incomplete\",\n      postalCode: this._validatePostalCode(formValues.postalCode),\n    }, this._displayedFields);\n\n    return {\n      valid: every(values(validationStatuses), status => status === \"valid\"),\n      status: validationStatuses,\n    };\n  };\n}\n"]},"metadata":{},"sourceType":"module"}