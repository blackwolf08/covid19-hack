{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";function _createSuper(Derived){return function(){var Super=_getPrototypeOf(Derived),result;if(_isNativeReflectConstruct()){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}import React,{Component}from\"react\";import PropTypes from\"prop-types\";import View from\"react-native-web/dist/exports/View\";import Text from\"react-native-web/dist/exports/Text\";import TextInput from\"react-native-web/dist/exports/TextInput\";import TouchableOpacity from\"react-native-web/dist/exports/TouchableOpacity\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import ViewPropTypes from\"react-native-web/dist/exports/ViewPropTypes\";var s=StyleSheet.create({baseInputStyle:{color:\"black\"}});var CCInput=function(_Component){_inherits(CCInput,_Component);var _super=_createSuper(CCInput);function CCInput(){var _this;_classCallCheck(this,CCInput);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.focus=function(){return _this.refs.input.focus();};_this._onFocus=function(){return _this.props.onFocus(_this.props.field);};_this._onChange=function(value){return _this.props.onChange(_this.props.field,value);};return _this;}_createClass(CCInput,[{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){var status=prevProps.status,value=prevProps.value,onBecomeEmpty=prevProps.onBecomeEmpty,onBecomeValid=prevProps.onBecomeValid,field=prevProps.field;var _this$props=this.props,newStatus=_this$props.status,newValue=_this$props.value;if(value!==\"\"&&newValue===\"\")onBecomeEmpty(field);if(status!==\"valid\"&&newStatus===\"valid\")onBecomeValid(field);}},{key:\"render\",value:function render(){var _this$props2=this.props,label=_this$props2.label,value=_this$props2.value,placeholder=_this$props2.placeholder,status=_this$props2.status,keyboardType=_this$props2.keyboardType,containerStyle=_this$props2.containerStyle,inputStyle=_this$props2.inputStyle,labelStyle=_this$props2.labelStyle,validColor=_this$props2.validColor,invalidColor=_this$props2.invalidColor,placeholderColor=_this$props2.placeholderColor,additionalInputProps=_this$props2.additionalInputProps;return React.createElement(TouchableOpacity,{onPress:this.focus,activeOpacity:0.99},React.createElement(View,{style:[containerStyle]},!!label&&React.createElement(Text,{style:[labelStyle]},label),React.createElement(TextInput,_extends({ref:\"input\"},additionalInputProps,{keyboardType:keyboardType,autoCapitalise:\"words\",autoCorrect:false,style:[s.baseInputStyle,inputStyle,validColor&&status===\"valid\"?{color:validColor}:invalidColor&&status===\"invalid\"?{color:invalidColor}:{}],underlineColorAndroid:\"transparent\",placeholderTextColor:placeholderColor,placeholder:placeholder,value:value,onFocus:this._onFocus,onChangeText:this._onChange}))));}}]);return CCInput;}(Component);CCInput.propTypes={field:PropTypes.string.isRequired,label:PropTypes.string,value:PropTypes.string,placeholder:PropTypes.string,keyboardType:PropTypes.string,status:PropTypes.oneOf([\"valid\",\"invalid\",\"incomplete\"]),containerStyle:ViewPropTypes.style,inputStyle:Text.propTypes.style,labelStyle:Text.propTypes.style,validColor:PropTypes.string,invalidColor:PropTypes.string,placeholderColor:PropTypes.string,onFocus:PropTypes.func,onChange:PropTypes.func,onBecomeEmpty:PropTypes.func,onBecomeValid:PropTypes.func,additionalInputProps:PropTypes.shape(TextInput.propTypes)};CCInput.defaultProps={label:\"\",value:\"\",status:\"incomplete\",containerStyle:{},inputStyle:{},labelStyle:{},onFocus:function onFocus(){},onChange:function onChange(){},onBecomeEmpty:function onBecomeEmpty(){},onBecomeValid:function onBecomeValid(){},additionalInputProps:{}};export{CCInput as default};","map":{"version":3,"sources":["/media/blackwolf08/Data/New Projects/Covid-19/COVID19/node_modules/react-native-input-credit-card/src/CCInput.js"],"names":["React","Component","PropTypes","s","StyleSheet","create","baseInputStyle","color","CCInput","focus","refs","input","_onFocus","props","onFocus","field","_onChange","value","onChange","prevProps","status","onBecomeEmpty","onBecomeValid","newStatus","newValue","label","placeholder","keyboardType","containerStyle","inputStyle","labelStyle","validColor","invalidColor","placeholderColor","additionalInputProps","propTypes","string","isRequired","oneOf","ViewPropTypes","style","Text","func","shape","TextInput","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  StyleSheet,\n  ViewPropTypes,\n} from \"react-native\";\n\nconst s = StyleSheet.create({\n  baseInputStyle: {\n    color: \"black\",\n  },\n});\n\nexport default class CCInput extends Component {\n  static propTypes = {\n    field: PropTypes.string.isRequired,\n    label: PropTypes.string,\n    value: PropTypes.string,\n    placeholder: PropTypes.string,\n    keyboardType: PropTypes.string,\n\n    status: PropTypes.oneOf([\"valid\", \"invalid\", \"incomplete\"]),\n\n    containerStyle: ViewPropTypes.style,\n    inputStyle: Text.propTypes.style,\n    labelStyle: Text.propTypes.style,\n    validColor: PropTypes.string,\n    invalidColor: PropTypes.string,\n    placeholderColor: PropTypes.string,\n\n    onFocus: PropTypes.func,\n    onChange: PropTypes.func,\n    onBecomeEmpty: PropTypes.func,\n    onBecomeValid: PropTypes.func,\n    additionalInputProps: PropTypes.shape(TextInput.propTypes),\n  };\n\n  static defaultProps = {\n    label: \"\",\n    value: \"\",\n    status: \"incomplete\",\n    containerStyle: {},\n    inputStyle: {},\n    labelStyle: {},\n    onFocus: () => { },\n    onChange: () => { },\n    onBecomeEmpty: () => { },\n    onBecomeValid: () => { },\n    additionalInputProps: {},\n  };\n\n  componentDidUpdate(prevProps) {\n    const { status, value, onBecomeEmpty, onBecomeValid, field } = prevProps;\n    const { status: newStatus, value: newValue } = this.props;\n\n    if (value !== \"\" && newValue === \"\") onBecomeEmpty(field);\n    if (status !== \"valid\" && newStatus === \"valid\") onBecomeValid(field);\n\n  }\n\n  focus = () => this.refs.input.focus();\n\n  _onFocus = () => this.props.onFocus(this.props.field);\n  _onChange = value => this.props.onChange(this.props.field, value);\n\n  render() {\n    const { label, value, placeholder, status, keyboardType,\n      containerStyle, inputStyle, labelStyle,\n      validColor, invalidColor, placeholderColor,\n      additionalInputProps } = this.props;\n    return (\n      <TouchableOpacity onPress={this.focus}\n        activeOpacity={0.99}>\n        <View style={[containerStyle]}>\n          {!!label && <Text style={[labelStyle]}>{label}</Text>}\n          <TextInput ref=\"input\"\n            {...additionalInputProps}\n            keyboardType={keyboardType}\n            autoCapitalise=\"words\"\n            autoCorrect={false}\n            style={[\n              s.baseInputStyle,\n              inputStyle,\n              ((validColor && status === \"valid\") ? { color: validColor } :\n                (invalidColor && status === \"invalid\") ? { color: invalidColor } :\n                  {}),\n            ]}\n            underlineColorAndroid={\"transparent\"}\n            placeholderTextColor={placeholderColor}\n            placeholder={placeholder}\n            value={value}\n            onFocus={this._onFocus}\n            onChangeText={this._onChange} />\n        </View>\n      </TouchableOpacity>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}