{"ast":null,"code":"import isWebColor from\"../isWebColor\";import processColor from\"../../exports/processColor\";var normalizeColor=function normalizeColor(color){var opacity=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;if(color==null)return;if(typeof color==='string'&&isWebColor(color)){return color;}var colorInt=processColor(color);if(colorInt!=null){var r=colorInt>>16&255;var g=colorInt>>8&255;var b=colorInt&255;var a=(colorInt>>24&255)/255;var alpha=(a*opacity).toFixed(2);return\"rgba(\"+r+\",\"+g+\",\"+b+\",\"+alpha+\")\";}};export default normalizeColor;","map":{"version":3,"sources":["/media/blackwolf08/Data/New Projects/Covid-19/COVID19/node_modules/react-native-web/src/modules/normalizeColor/index.js"],"names":["isWebColor","processColor","normalizeColor","color","opacity","colorInt","r","g","b","a","alpha","toFixed"],"mappings":"AASA,MAAOA,CAAAA,UAAP,qBACA,MAAOC,CAAAA,YAAP,kCAEA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,KAAD,CAAmD,IAAzBC,CAAAA,OAAyB,2DAAN,CAAM,CACxE,GAAID,KAAK,EAAI,IAAb,CAAmB,OAEnB,GAAI,MAAOA,CAAAA,KAAP,GAAiB,QAAjB,EAA6BH,UAAU,CAACG,KAAD,CAA3C,CAAoD,CAClD,MAAOA,CAAAA,KAAP,CACD,CAED,GAAME,CAAAA,QAAQ,CAAGJ,YAAY,CAACE,KAAD,CAA7B,CACA,GAAIE,QAAQ,EAAI,IAAhB,CAAsB,CACpB,GAAMC,CAAAA,CAAC,CAAID,QAAQ,EAAI,EAAb,CAAmB,GAA7B,CACA,GAAME,CAAAA,CAAC,CAAIF,QAAQ,EAAI,CAAb,CAAkB,GAA5B,CACA,GAAMG,CAAAA,CAAC,CAAGH,QAAQ,CAAG,GAArB,CACA,GAAMI,CAAAA,CAAC,CAAG,CAAEJ,QAAQ,EAAI,EAAb,CAAmB,GAApB,EAA2B,GAArC,CACA,GAAMK,CAAAA,KAAK,CAAG,CAACD,CAAC,CAAGL,OAAL,EAAcO,OAAd,CAAsB,CAAtB,CAAd,CACA,cAAeL,CAAf,KAAoBC,CAApB,KAAyBC,CAAzB,KAA8BE,KAA9B,KACD,CACF,CAhBD,CAkBA,cAAeR,CAAAA,cAAf","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport isWebColor from '../isWebColor';\nimport processColor from '../../exports/processColor';\n\nconst normalizeColor = (color?: number | string, opacity?: number = 1) => {\n  if (color == null) return;\n\n  if (typeof color === 'string' && isWebColor(color)) {\n    return color;\n  }\n\n  const colorInt = processColor(color);\n  if (colorInt != null) {\n    const r = (colorInt >> 16) & 255;\n    const g = (colorInt >> 8) & 255;\n    const b = colorInt & 255;\n    const a = ((colorInt >> 24) & 255) / 255;\n    const alpha = (a * opacity).toFixed(2);\n    return `rgba(${r},${g},${b},${alpha})`;\n  }\n};\n\nexport default normalizeColor;\n"]},"metadata":{},"sourceType":"module"}