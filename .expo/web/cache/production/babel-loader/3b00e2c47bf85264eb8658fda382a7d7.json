{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";function _createSuper(Derived){return function(){var Super=_getPrototypeOf(Derived),result;if(_isNativeReflectConstruct()){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import View from\"react-native-web/dist/exports/View\";import Platform from\"react-native-web/dist/exports/Platform\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import{SafeAreaConsumer}from'react-native-safe-area-context';import{GestureHandlerRootView}from'react-native-gesture-handler';import{StackActions,SceneView}from'react-navigation';import CardStack from\"./CardStack\";import KeyboardManager from\"../KeyboardManager\";import HeaderContainer from\"../Header/HeaderContainer\";import SafeAreaProviderCompat from\"../SafeAreaProviderCompat\";var GestureHandlerWrapper=GestureHandlerRootView!==null&&GestureHandlerRootView!==void 0?GestureHandlerRootView:View;var isArrayEqual=function isArrayEqual(a,b){return a.length===b.length&&a.every(function(it,index){return it===b[index];});};var StackView=function(_React$Component){_inherits(StackView,_React$Component);var _super=_createSuper(StackView);function StackView(){var _this;_classCallCheck(this,StackView);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty(_assertThisInitialized(_this),\"state\",{routes:[],previousRoutes:[],previousDescriptors:{},openingRouteKeys:[],closingRouteKeys:[],replacingRouteKeys:[],descriptors:{}});_defineProperty(_assertThisInitialized(_this),\"getGesturesEnabled\",function(_ref){var route=_ref.route;var descriptor=_this.state.descriptors[route.key];if(descriptor){var _descriptor$options3=descriptor.options,gestureEnabled=_descriptor$options3.gestureEnabled,animationEnabled=_descriptor$options3.animationEnabled;if(animationEnabled===false){return false;}return gestureEnabled!==undefined?gestureEnabled:Platform.OS!=='android';}return false;});_defineProperty(_assertThisInitialized(_this),\"getPreviousRoute\",function(_ref2){var route=_ref2.route;var _this$state=_this.state,closingRouteKeys=_this$state.closingRouteKeys,replacingRouteKeys=_this$state.replacingRouteKeys;var routes=_this.state.routes.filter(function(r){return r.key===route.key||!closingRouteKeys.includes(r.key)&&!replacingRouteKeys.includes(r.key);});var index=routes.findIndex(function(r){return r.key===route.key;});return routes[index-1];});_defineProperty(_assertThisInitialized(_this),\"renderScene\",function(_ref3){var route=_ref3.route;var descriptor=_this.state.descriptors[route.key]||_this.props.descriptors[route.key];if(!descriptor){return null;}var navigation=descriptor.navigation,getComponent=descriptor.getComponent;var SceneComponent=getComponent();return React.createElement(SceneView,{screenProps:_this.props.screenProps,navigation:navigation,component:SceneComponent});});_defineProperty(_assertThisInitialized(_this),\"renderHeader\",function(props){return React.createElement(HeaderContainer,props);});_defineProperty(_assertThisInitialized(_this),\"handleTransitionComplete\",function(){var _this$props2=_this.props,state=_this$props2.state,navigation=_this$props2.navigation;if(state.isTransitioning){navigation.dispatch(StackActions.completeTransition({key:navigation.state.key,toChildKey:state.routes[state.index].key}));}});_defineProperty(_assertThisInitialized(_this),\"handleOpenRoute\",function(_ref4){var route=_ref4.route;_this.handleTransitionComplete();_this.setState(function(state){return{routes:state.replacingRouteKeys.length?state.routes.filter(function(r){return!state.replacingRouteKeys.includes(r.key);}):state.routes,openingRouteKeys:state.openingRouteKeys.filter(function(key){return key!==route.key;}),closingRouteKeys:state.closingRouteKeys.filter(function(key){return key!==route.key;}),replacingRouteKeys:[]};});});_defineProperty(_assertThisInitialized(_this),\"handleCloseRoute\",function(_ref5){var route=_ref5.route;var _this$props3=_this.props,state=_this$props3.state,navigation=_this$props3.navigation;if(state.routes.find(function(r){return r.key===route.key;})){navigation.dispatch(StackActions.pop({key:route.key,prune:false}));}else{_this.handleTransitionComplete();_this.setState(function(state){return{routes:state.routes.filter(function(r){return r.key!==route.key;}),openingRouteKeys:state.openingRouteKeys.filter(function(key){return key!==route.key;}),closingRouteKeys:state.closingRouteKeys.filter(function(key){return key!==route.key;})};});}});_defineProperty(_assertThisInitialized(_this),\"handleTransitionStart\",function(_ref6,closing){var route=_ref6.route;var _descriptor$options$o,_descriptor$options;var descriptors=_this.props.descriptors;var descriptor=descriptors[route.key]||_this.state.descriptors[route.key];descriptor===null||descriptor===void 0?void 0:(_descriptor$options$o=(_descriptor$options=descriptor.options).onTransitionStart)===null||_descriptor$options$o===void 0?void 0:_descriptor$options$o.call(_descriptor$options,{closing:closing});});_defineProperty(_assertThisInitialized(_this),\"handleTransitionEnd\",function(_ref7,closing){var route=_ref7.route;var _descriptor$options$o2,_descriptor$options2;var descriptors=_this.props.descriptors;var descriptor=descriptors[route.key]||_this.state.descriptors[route.key];descriptor===null||descriptor===void 0?void 0:(_descriptor$options$o2=(_descriptor$options2=descriptor.options).onTransitionEnd)===null||_descriptor$options$o2===void 0?void 0:_descriptor$options$o2.call(_descriptor$options2,{closing:closing});});return _this;}_createClass(StackView,[{key:\"render\",value:function render(){var _this2=this;var _this$props=this.props,state=_this$props.state,navigation=_this$props.navigation,keyboardHandlingEnabled=_this$props.keyboardHandlingEnabled,_this$props$mode=_this$props.mode,mode=_this$props$mode===void 0?'card':_this$props$mode,rest=_objectWithoutProperties(_this$props,[\"state\",\"navigation\",\"keyboardHandlingEnabled\",\"mode\"]);var _this$state2=this.state,routes=_this$state2.routes,descriptors=_this$state2.descriptors,openingRouteKeys=_this$state2.openingRouteKeys,closingRouteKeys=_this$state2.closingRouteKeys;var headerMode=mode!=='modal'&&Platform.OS==='ios'?'float':'screen';return React.createElement(GestureHandlerWrapper,{style:styles.container},React.createElement(SafeAreaProviderCompat,null,React.createElement(SafeAreaConsumer,null,function(insets){return React.createElement(KeyboardManager,{enabled:keyboardHandlingEnabled!==false},function(props){return React.createElement(CardStack,_extends({mode:mode,insets:insets,getPreviousRoute:_this2.getPreviousRoute,getGesturesEnabled:_this2.getGesturesEnabled,routes:routes,openingRouteKeys:openingRouteKeys,closingRouteKeys:closingRouteKeys,onOpenRoute:_this2.handleOpenRoute,onCloseRoute:_this2.handleCloseRoute,onTransitionStart:_this2.handleTransitionStart,onTransitionEnd:_this2.handleTransitionEnd,renderHeader:_this2.renderHeader,renderScene:_this2.renderScene,headerMode:headerMode,state:state,descriptors:descriptors},rest,props));});})));}}],[{key:\"getDerivedStateFromProps\",value:function getDerivedStateFromProps(props,state){if((props.state.routes===state.previousRoutes||isArrayEqual(props.state.routes.map(function(r){return r.key;}),state.previousRoutes.map(function(r){return r.key;})))&&state.routes.length){var _routes=state.routes;var _previousRoutes=state.previousRoutes;var _descriptors=props.descriptors;var previousDescriptors=state.previousDescriptors;if(props.descriptors!==state.previousDescriptors){_descriptors=state.routes.reduce(function(acc,route){acc[route.key]=props.descriptors[route.key]||state.descriptors[route.key];return acc;},{});previousDescriptors=props.descriptors;}if(props.state.routes!==state.previousRoutes){var map=props.state.routes.reduce(function(acc,route){acc[route.key]=route;return acc;},{});_routes=state.routes.map(function(route){return map[route.key]||route;});_previousRoutes=props.state.routes;}return{routes:_routes,previousRoutes:_previousRoutes,descriptors:_descriptors,previousDescriptors:previousDescriptors};}var routes=props.state.index<props.state.routes.length-1?props.state.routes.slice(0,props.state.index+1):props.state.routes;var openingRouteKeys=state.openingRouteKeys,closingRouteKeys=state.closingRouteKeys,replacingRouteKeys=state.replacingRouteKeys,previousRoutes=state.previousRoutes;var previousFocusedRoute=previousRoutes[previousRoutes.length-1];var nextFocusedRoute=routes[routes.length-1];var isAnimationEnabled=function isAnimationEnabled(key){var descriptor=props.descriptors[key]||state.descriptors[key];return descriptor?descriptor.options.animationEnabled!==false:true;};var getAnimationTypeForReplace=function getAnimationTypeForReplace(key){var _descriptor$options$a;var descriptor=props.descriptors[key]||state.descriptors[key];return(_descriptor$options$a=descriptor.options.animationTypeForReplace)!==null&&_descriptor$options$a!==void 0?_descriptor$options$a:'push';};if(previousFocusedRoute&&previousFocusedRoute.key!==nextFocusedRoute.key){if(!previousRoutes.find(function(r){return r.key===nextFocusedRoute.key;})){if(isAnimationEnabled(nextFocusedRoute.key)&&!openingRouteKeys.includes(nextFocusedRoute.key)){openingRouteKeys=[].concat(_toConsumableArray(openingRouteKeys),[nextFocusedRoute.key]);closingRouteKeys=closingRouteKeys.filter(function(key){return key!==nextFocusedRoute.key;});replacingRouteKeys=replacingRouteKeys.filter(function(key){return key!==nextFocusedRoute.key;});if(!routes.find(function(r){return r.key===previousFocusedRoute.key;})){openingRouteKeys=openingRouteKeys.filter(function(key){return key!==previousFocusedRoute.key;});if(getAnimationTypeForReplace(nextFocusedRoute.key)==='pop'){closingRouteKeys=[].concat(_toConsumableArray(closingRouteKeys),[previousFocusedRoute.key]);openingRouteKeys=openingRouteKeys.filter(function(key){return key!==nextFocusedRoute.key;});routes=[].concat(_toConsumableArray(routes),[previousFocusedRoute]);}else{replacingRouteKeys=[].concat(_toConsumableArray(replacingRouteKeys),[previousFocusedRoute.key]);closingRouteKeys=closingRouteKeys.filter(function(key){return key!==previousFocusedRoute.key;});routes=routes.slice();routes.splice(routes.length-1,0,previousFocusedRoute);}}}}else if(!routes.find(function(r){return r.key===previousFocusedRoute.key;})){if(isAnimationEnabled(previousFocusedRoute.key)&&!closingRouteKeys.includes(previousFocusedRoute.key)){closingRouteKeys=[].concat(_toConsumableArray(closingRouteKeys),[previousFocusedRoute.key]);openingRouteKeys=openingRouteKeys.filter(function(key){return key!==previousFocusedRoute.key;});replacingRouteKeys=replacingRouteKeys.filter(function(key){return key!==previousFocusedRoute.key;});routes=[].concat(_toConsumableArray(routes),[previousFocusedRoute]);}}else{}}else if(replacingRouteKeys.length||closingRouteKeys.length){var _routes2;routes=routes.slice();(_routes2=routes).splice.apply(_routes2,[routes.length-1,0].concat(_toConsumableArray(state.routes.filter(function(_ref8){var key=_ref8.key;return isAnimationEnabled(key)?replacingRouteKeys.includes(key)||closingRouteKeys.includes(key):false;}))));}if(!routes.length){throw new Error('There should always be at least one route in the navigation state.');}var descriptors=routes.reduce(function(acc,route){acc[route.key]=props.descriptors[route.key]||state.descriptors[route.key];return acc;},{});return{routes:routes,previousRoutes:props.state.routes,previousDescriptors:props.descriptors,openingRouteKeys:openingRouteKeys,closingRouteKeys:closingRouteKeys,replacingRouteKeys:replacingRouteKeys,descriptors:descriptors};}}]);return StackView;}(React.Component);export{StackView as default};var styles=StyleSheet.create({container:{flex:1}});","map":{"version":3,"sources":["StackView.tsx"],"names":["GestureHandlerWrapper","GestureHandlerRootView","isArrayEqual","a","b","it","React","props","state","r","routes","previousRoutes","descriptors","previousDescriptors","acc","route","map","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","key","descriptor","getAnimationTypeForReplace","openingRouteKeys","closingRouteKeys","replacingRouteKeys","animationEnabled","gestureEnabled","Platform","index","getComponent","SceneComponent","navigation","toChildKey","prune","closing","mode","headerMode","styles","container","insets","keyboardHandlingEnabled","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Platform, StyleSheet } from 'react-native';\nimport { SafeAreaConsumer, EdgeInsets } from 'react-native-safe-area-context';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport {\n  StackActions,\n  NavigationState as StackNavigationState,\n  SceneView,\n} from 'react-navigation';\n\nimport CardStack from './CardStack';\nimport KeyboardManager from '../KeyboardManager';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport SafeAreaProviderCompat from '../SafeAreaProviderCompat';\nimport {\n  Route,\n  StackNavigationHelpers,\n  StackNavigationConfig,\n  StackDescriptorMap,\n} from '../../types';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n  screenProps: unknown;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (\n      (props.state.routes === state.previousRoutes ||\n        isArrayEqual(\n          props.state.routes.map((r) => r.key),\n          state.previousRoutes.map((r) => r.key)\n        )) &&\n      state.routes.length\n    ) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce<StackDescriptorMap>((acc, route) => {\n          acc[route.key] =\n            props.descriptors[route.key] || state.descriptors[route.key];\n\n          return acc;\n        }, {});\n\n        previousDescriptors = props.descriptors;\n      }\n\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce<Record<string, Route<string>>>(\n          (acc, route) => {\n            acc[route.key] = route;\n            return acc;\n          },\n          {}\n        );\n\n        routes = state.routes.map((route) => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors,\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.find((r) => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.find((r) => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              (key) => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                (key) => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                (key) => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.find((r) => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getGesturesEnabled = ({ route }: { route: Route<string> }) => {\n    const descriptor = this.state.descriptors[route.key];\n\n    if (descriptor) {\n      const { gestureEnabled, animationEnabled } = descriptor.options;\n\n      if (animationEnabled === false) {\n        // When animation is disabled, also disable gestures\n        // The gesture to dismiss a route will look weird when not animated\n        return false;\n      }\n\n      return gestureEnabled !== undefined\n        ? gestureEnabled\n        : Platform.OS !== 'android';\n    }\n\n    return false;\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      (r) =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex((r) => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    const { navigation, getComponent } = descriptor;\n    const SceneComponent = getComponent();\n\n    return (\n      <SceneView\n        screenProps={this.props.screenProps}\n        navigation={navigation}\n        component={SceneComponent}\n      />\n    );\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleTransitionComplete = () => {\n    const { state, navigation } = this.props;\n\n    if (state.isTransitioning) {\n      navigation.dispatch(\n        StackActions.completeTransition({\n          key: navigation.state.key,\n          toChildKey: state.routes[state.index].key,\n        })\n      );\n    }\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    this.handleTransitionComplete();\n    this.setState((state) => ({\n      routes: state.replacingRouteKeys.length\n        ? state.routes.filter((r) => !state.replacingRouteKeys.includes(r.key))\n        : state.routes,\n      openingRouteKeys: state.openingRouteKeys.filter(\n        (key) => key !== route.key\n      ),\n      closingRouteKeys: state.closingRouteKeys.filter(\n        (key) => key !== route.key\n      ),\n      replacingRouteKeys: [],\n    }));\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.find((r) => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      // @ts-ignore\n      navigation.dispatch(StackActions.pop({ key: route.key, prune: false }));\n    } else {\n      this.handleTransitionComplete();\n\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState((state) => ({\n        routes: state.routes.filter((r) => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) => {\n    const { descriptors } = this.props;\n    const descriptor =\n      descriptors[route.key] || this.state.descriptors[route.key];\n\n    descriptor?.options.onTransitionStart?.({ closing });\n  };\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) => {\n    const { descriptors } = this.props;\n    const descriptor =\n      descriptors[route.key] || this.state.descriptors[route.key];\n\n    descriptor?.options.onTransitionEnd?.({ closing });\n  };\n\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      navigation,\n      keyboardHandlingEnabled,\n      mode = 'card',\n      ...rest\n    } = this.props;\n\n    const {\n      routes,\n      descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n    } = this.state;\n\n    const headerMode =\n      mode !== 'modal' && Platform.OS === 'ios' ? 'float' : 'screen';\n\n    return (\n      <GestureHandlerWrapper style={styles.container}>\n        <SafeAreaProviderCompat>\n          <SafeAreaConsumer>\n            {(insets) => (\n              <KeyboardManager enabled={keyboardHandlingEnabled !== false}>\n                {(props) => (\n                  <CardStack\n                    mode={mode}\n                    insets={insets as EdgeInsets}\n                    getPreviousRoute={this.getPreviousRoute}\n                    getGesturesEnabled={this.getGesturesEnabled}\n                    routes={routes}\n                    openingRouteKeys={openingRouteKeys}\n                    closingRouteKeys={closingRouteKeys}\n                    onOpenRoute={this.handleOpenRoute}\n                    onCloseRoute={this.handleCloseRoute}\n                    onTransitionStart={this.handleTransitionStart}\n                    onTransitionEnd={this.handleTransitionEnd}\n                    renderHeader={this.renderHeader}\n                    renderScene={this.renderScene}\n                    headerMode={headerMode}\n                    state={state}\n                    descriptors={descriptors}\n                    {...rest}\n                    {...props}\n                  />\n                )}\n              </KeyboardManager>\n            )}\n          </SafeAreaConsumer>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}