{"ast":null,"code":"'use strict';var types=require(\"./lib/card-types\");var clone=require(\"./lib/clone\");var findBestMatch=require(\"./lib/find-best-match\");var isValidInputType=require(\"./lib/is-valid-input-type\");var addMatchingCardsToResults=require(\"./lib/add-matching-cards-to-results\");var testOrder;var customCards={};var cardNames={VISA:'visa',MASTERCARD:'mastercard',AMERICAN_EXPRESS:'american-express',DINERS_CLUB:'diners-club',DISCOVER:'discover',JCB:'jcb',UNIONPAY:'unionpay',MAESTRO:'maestro',ELO:'elo',MIR:'mir',HIPER:'hiper',HIPERCARD:'hipercard'};var ORIGINAL_TEST_ORDER=[cardNames.VISA,cardNames.MASTERCARD,cardNames.AMERICAN_EXPRESS,cardNames.DINERS_CLUB,cardNames.DISCOVER,cardNames.JCB,cardNames.UNIONPAY,cardNames.MAESTRO,cardNames.ELO,cardNames.MIR,cardNames.HIPER,cardNames.HIPERCARD];testOrder=clone(ORIGINAL_TEST_ORDER);function findType(type){return customCards[type]||types[type];}function getAllCardTypes(){return testOrder.map(function(type){return clone(findType(type));});}function getCardPosition(name,ignoreErrorForNotExisting){var position=testOrder.indexOf(name);if(!ignoreErrorForNotExisting&&position===-1){throw new Error('\"'+name+'\" is not a supported card type.');}return position;}function creditCardType(cardNumber){var bestMatch;var results=[];if(!isValidInputType(cardNumber)){return[];}if(cardNumber.length===0){return getAllCardTypes(testOrder);}testOrder.forEach(function(type){var cardConfiguration=findType(type);addMatchingCardsToResults(cardNumber,cardConfiguration,results);});bestMatch=findBestMatch(results);if(bestMatch){return[bestMatch];}return results;}creditCardType.getTypeInfo=function(type){return clone(findType(type));};creditCardType.removeCard=function(name){var position=getCardPosition(name);testOrder.splice(position,1);};creditCardType.addCard=function(config){var existingCardPosition=getCardPosition(config.type,true);customCards[config.type]=config;if(existingCardPosition===-1){testOrder.push(config.type);}};creditCardType.updateCard=function(cardType,updates){var clonedCard;var originalObject=customCards[cardType]||types[cardType];if(!originalObject){throw new Error('\"'+cardType+'\" is not a recognized type. Use `addCard` instead.');}if(updates.type&&originalObject.type!==updates.type){throw new Error('Cannot overwrite type parameter.');}clonedCard=clone(originalObject,true);Object.keys(clonedCard).forEach(function(key){if(updates[key]){clonedCard[key]=updates[key];}});customCards[clonedCard.type]=clonedCard;};creditCardType.changeOrder=function(name,position){var currentPosition=getCardPosition(name);testOrder.splice(currentPosition,1);testOrder.splice(position,0,name);};creditCardType.resetModifications=function(){testOrder=clone(ORIGINAL_TEST_ORDER);customCards={};};creditCardType.types=cardNames;module.exports=creditCardType;","map":{"version":3,"sources":["/media/blackwolf08/Data/New Projects/Covid-19/COVID19/node_modules/react-native-input-credit-card/node_modules/credit-card-type/index.js"],"names":["types","require","clone","findBestMatch","isValidInputType","addMatchingCardsToResults","testOrder","customCards","cardNames","VISA","MASTERCARD","AMERICAN_EXPRESS","DINERS_CLUB","DISCOVER","JCB","UNIONPAY","MAESTRO","ELO","MIR","HIPER","HIPERCARD","ORIGINAL_TEST_ORDER","findType","type","getAllCardTypes","map","getCardPosition","name","ignoreErrorForNotExisting","position","indexOf","Error","creditCardType","cardNumber","bestMatch","results","length","forEach","cardConfiguration","getTypeInfo","removeCard","splice","addCard","config","existingCardPosition","push","updateCard","cardType","updates","clonedCard","originalObject","Object","keys","key","changeOrder","currentPosition","resetModifications","module","exports"],"mappings":"AAAA,aAEA,GAAIA,CAAAA,KAAK,CAAGC,OAAO,oBAAnB,CACA,GAAIC,CAAAA,KAAK,CAAGD,OAAO,eAAnB,CACA,GAAIE,CAAAA,aAAa,CAAGF,OAAO,yBAA3B,CACA,GAAIG,CAAAA,gBAAgB,CAAGH,OAAO,6BAA9B,CACA,GAAII,CAAAA,yBAAyB,CAAGJ,OAAO,uCAAvC,CAEA,GAAIK,CAAAA,SAAJ,CACA,GAAIC,CAAAA,WAAW,CAAG,EAAlB,CAEA,GAAIC,CAAAA,SAAS,CAAG,CACdC,IAAI,CAAE,MADQ,CAEdC,UAAU,CAAE,YAFE,CAGdC,gBAAgB,CAAE,kBAHJ,CAIdC,WAAW,CAAE,aAJC,CAKdC,QAAQ,CAAE,UALI,CAMdC,GAAG,CAAE,KANS,CAOdC,QAAQ,CAAE,UAPI,CAQdC,OAAO,CAAE,SARK,CASdC,GAAG,CAAE,KATS,CAUdC,GAAG,CAAE,KAVS,CAWdC,KAAK,CAAE,OAXO,CAYdC,SAAS,CAAE,WAZG,CAAhB,CAeA,GAAIC,CAAAA,mBAAmB,CAAG,CACxBb,SAAS,CAACC,IADc,CAExBD,SAAS,CAACE,UAFc,CAGxBF,SAAS,CAACG,gBAHc,CAIxBH,SAAS,CAACI,WAJc,CAKxBJ,SAAS,CAACK,QALc,CAMxBL,SAAS,CAACM,GANc,CAOxBN,SAAS,CAACO,QAPc,CAQxBP,SAAS,CAACQ,OARc,CASxBR,SAAS,CAACS,GATc,CAUxBT,SAAS,CAACU,GAVc,CAWxBV,SAAS,CAACW,KAXc,CAYxBX,SAAS,CAACY,SAZc,CAA1B,CAeAd,SAAS,CAAGJ,KAAK,CAACmB,mBAAD,CAAjB,CAEA,QAASC,CAAAA,QAAT,CAAkBC,IAAlB,CAAwB,CACtB,MAAOhB,CAAAA,WAAW,CAACgB,IAAD,CAAX,EAAqBvB,KAAK,CAACuB,IAAD,CAAjC,CACD,CAED,QAASC,CAAAA,eAAT,EAA2B,CACzB,MAAOlB,CAAAA,SAAS,CAACmB,GAAV,CAAc,SAAUF,IAAV,CAAgB,CACnC,MAAOrB,CAAAA,KAAK,CAACoB,QAAQ,CAACC,IAAD,CAAT,CAAZ,CACD,CAFM,CAAP,CAGD,CAED,QAASG,CAAAA,eAAT,CAAyBC,IAAzB,CAA+BC,yBAA/B,CAA0D,CACxD,GAAIC,CAAAA,QAAQ,CAAGvB,SAAS,CAACwB,OAAV,CAAkBH,IAAlB,CAAf,CAEA,GAAI,CAACC,yBAAD,EAA8BC,QAAQ,GAAK,CAAC,CAAhD,CAAmD,CACjD,KAAM,IAAIE,CAAAA,KAAJ,CAAU,IAAMJ,IAAN,CAAa,iCAAvB,CAAN,CACD,CAED,MAAOE,CAAAA,QAAP,CACD,CAED,QAASG,CAAAA,cAAT,CAAwBC,UAAxB,CAAoC,CAClC,GAAIC,CAAAA,SAAJ,CACA,GAAIC,CAAAA,OAAO,CAAG,EAAd,CAEA,GAAI,CAAC/B,gBAAgB,CAAC6B,UAAD,CAArB,CAAmC,CACjC,MAAO,EAAP,CACD,CAED,GAAIA,UAAU,CAACG,MAAX,GAAsB,CAA1B,CAA6B,CAC3B,MAAOZ,CAAAA,eAAe,CAAClB,SAAD,CAAtB,CACD,CAEDA,SAAS,CAAC+B,OAAV,CAAkB,SAAUd,IAAV,CAAgB,CAChC,GAAIe,CAAAA,iBAAiB,CAAGhB,QAAQ,CAACC,IAAD,CAAhC,CAEAlB,yBAAyB,CAAC4B,UAAD,CAAaK,iBAAb,CAAgCH,OAAhC,CAAzB,CACD,CAJD,EAMAD,SAAS,CAAG/B,aAAa,CAACgC,OAAD,CAAzB,CAEA,GAAID,SAAJ,CAAe,CACb,MAAO,CAACA,SAAD,CAAP,CACD,CAED,MAAOC,CAAAA,OAAP,CACD,CAEDH,cAAc,CAACO,WAAf,CAA6B,SAAUhB,IAAV,CAAgB,CAC3C,MAAOrB,CAAAA,KAAK,CAACoB,QAAQ,CAACC,IAAD,CAAT,CAAZ,CACD,CAFD,CAIAS,cAAc,CAACQ,UAAf,CAA4B,SAAUb,IAAV,CAAgB,CAC1C,GAAIE,CAAAA,QAAQ,CAAGH,eAAe,CAACC,IAAD,CAA9B,CAEArB,SAAS,CAACmC,MAAV,CAAiBZ,QAAjB,CAA2B,CAA3B,EACD,CAJD,CAMAG,cAAc,CAACU,OAAf,CAAyB,SAAUC,MAAV,CAAkB,CACzC,GAAIC,CAAAA,oBAAoB,CAAGlB,eAAe,CAACiB,MAAM,CAACpB,IAAR,CAAc,IAAd,CAA1C,CAEAhB,WAAW,CAACoC,MAAM,CAACpB,IAAR,CAAX,CAA2BoB,MAA3B,CAEA,GAAIC,oBAAoB,GAAK,CAAC,CAA9B,CAAiC,CAC/BtC,SAAS,CAACuC,IAAV,CAAeF,MAAM,CAACpB,IAAtB,EACD,CACF,CARD,CAUAS,cAAc,CAACc,UAAf,CAA4B,SAAUC,QAAV,CAAoBC,OAApB,CAA6B,CACvD,GAAIC,CAAAA,UAAJ,CACA,GAAIC,CAAAA,cAAc,CAAG3C,WAAW,CAACwC,QAAD,CAAX,EAAyB/C,KAAK,CAAC+C,QAAD,CAAnD,CAEA,GAAI,CAACG,cAAL,CAAqB,CACnB,KAAM,IAAInB,CAAAA,KAAJ,CAAU,IAAMgB,QAAN,CAAiB,oDAA3B,CAAN,CACD,CAED,GAAIC,OAAO,CAACzB,IAAR,EAAgB2B,cAAc,CAAC3B,IAAf,GAAwByB,OAAO,CAACzB,IAApD,CAA0D,CACxD,KAAM,IAAIQ,CAAAA,KAAJ,CAAU,kCAAV,CAAN,CACD,CAEDkB,UAAU,CAAG/C,KAAK,CAACgD,cAAD,CAAiB,IAAjB,CAAlB,CAEAC,MAAM,CAACC,IAAP,CAAYH,UAAZ,EAAwBZ,OAAxB,CAAgC,SAAUgB,GAAV,CAAe,CAC7C,GAAIL,OAAO,CAACK,GAAD,CAAX,CAAkB,CAChBJ,UAAU,CAACI,GAAD,CAAV,CAAkBL,OAAO,CAACK,GAAD,CAAzB,CACD,CACF,CAJD,EAMA9C,WAAW,CAAC0C,UAAU,CAAC1B,IAAZ,CAAX,CAA+B0B,UAA/B,CACD,CArBD,CAuBAjB,cAAc,CAACsB,WAAf,CAA6B,SAAU3B,IAAV,CAAgBE,QAAhB,CAA0B,CACrD,GAAI0B,CAAAA,eAAe,CAAG7B,eAAe,CAACC,IAAD,CAArC,CAEArB,SAAS,CAACmC,MAAV,CAAiBc,eAAjB,CAAkC,CAAlC,EACAjD,SAAS,CAACmC,MAAV,CAAiBZ,QAAjB,CAA2B,CAA3B,CAA8BF,IAA9B,EACD,CALD,CAOAK,cAAc,CAACwB,kBAAf,CAAoC,UAAY,CAC9ClD,SAAS,CAAGJ,KAAK,CAACmB,mBAAD,CAAjB,CACAd,WAAW,CAAG,EAAd,CACD,CAHD,CAKAyB,cAAc,CAAChC,KAAf,CAAuBQ,SAAvB,CAEAiD,MAAM,CAACC,OAAP,CAAiB1B,cAAjB","sourcesContent":["'use strict';\n\nvar types = require('./lib/card-types');\nvar clone = require('./lib/clone');\nvar findBestMatch = require('./lib/find-best-match');\nvar isValidInputType = require('./lib/is-valid-input-type');\nvar addMatchingCardsToResults = require('./lib/add-matching-cards-to-results');\n\nvar testOrder;\nvar customCards = {};\n\nvar cardNames = {\n  VISA: 'visa',\n  MASTERCARD: 'mastercard',\n  AMERICAN_EXPRESS: 'american-express',\n  DINERS_CLUB: 'diners-club',\n  DISCOVER: 'discover',\n  JCB: 'jcb',\n  UNIONPAY: 'unionpay',\n  MAESTRO: 'maestro',\n  ELO: 'elo',\n  MIR: 'mir',\n  HIPER: 'hiper',\n  HIPERCARD: 'hipercard'\n};\n\nvar ORIGINAL_TEST_ORDER = [\n  cardNames.VISA,\n  cardNames.MASTERCARD,\n  cardNames.AMERICAN_EXPRESS,\n  cardNames.DINERS_CLUB,\n  cardNames.DISCOVER,\n  cardNames.JCB,\n  cardNames.UNIONPAY,\n  cardNames.MAESTRO,\n  cardNames.ELO,\n  cardNames.MIR,\n  cardNames.HIPER,\n  cardNames.HIPERCARD\n];\n\ntestOrder = clone(ORIGINAL_TEST_ORDER);\n\nfunction findType(type) {\n  return customCards[type] || types[type];\n}\n\nfunction getAllCardTypes() {\n  return testOrder.map(function (type) {\n    return clone(findType(type));\n  });\n}\n\nfunction getCardPosition(name, ignoreErrorForNotExisting) {\n  var position = testOrder.indexOf(name);\n\n  if (!ignoreErrorForNotExisting && position === -1) {\n    throw new Error('\"' + name + '\" is not a supported card type.');\n  }\n\n  return position;\n}\n\nfunction creditCardType(cardNumber) {\n  var bestMatch;\n  var results = [];\n\n  if (!isValidInputType(cardNumber)) {\n    return [];\n  }\n\n  if (cardNumber.length === 0) {\n    return getAllCardTypes(testOrder);\n  }\n\n  testOrder.forEach(function (type) {\n    var cardConfiguration = findType(type);\n\n    addMatchingCardsToResults(cardNumber, cardConfiguration, results);\n  });\n\n  bestMatch = findBestMatch(results);\n\n  if (bestMatch) {\n    return [bestMatch];\n  }\n\n  return results;\n}\n\ncreditCardType.getTypeInfo = function (type) {\n  return clone(findType(type));\n};\n\ncreditCardType.removeCard = function (name) {\n  var position = getCardPosition(name);\n\n  testOrder.splice(position, 1);\n};\n\ncreditCardType.addCard = function (config) {\n  var existingCardPosition = getCardPosition(config.type, true);\n\n  customCards[config.type] = config;\n\n  if (existingCardPosition === -1) {\n    testOrder.push(config.type);\n  }\n};\n\ncreditCardType.updateCard = function (cardType, updates) {\n  var clonedCard;\n  var originalObject = customCards[cardType] || types[cardType];\n\n  if (!originalObject) {\n    throw new Error('\"' + cardType + '\" is not a recognized type. Use `addCard` instead.');\n  }\n\n  if (updates.type && originalObject.type !== updates.type) {\n    throw new Error('Cannot overwrite type parameter.');\n  }\n\n  clonedCard = clone(originalObject, true);\n\n  Object.keys(clonedCard).forEach(function (key) {\n    if (updates[key]) {\n      clonedCard[key] = updates[key];\n    }\n  });\n\n  customCards[clonedCard.type] = clonedCard;\n};\n\ncreditCardType.changeOrder = function (name, position) {\n  var currentPosition = getCardPosition(name);\n\n  testOrder.splice(currentPosition, 1);\n  testOrder.splice(position, 0, name);\n};\n\ncreditCardType.resetModifications = function () {\n  testOrder = clone(ORIGINAL_TEST_ORDER);\n  customCards = {};\n};\n\ncreditCardType.types = cardNames;\n\nmodule.exports = creditCardType;\n"]},"metadata":{},"sourceType":"script"}