{"ast":null,"code":"import Animated from\"react-native-reanimated\";import{atan2}from\"./Math\";var sub=Animated.sub,multiply=Animated.multiply,add=Animated.add,cos=Animated.cos,sin=Animated.sin,pow=Animated.pow,sqrt=Animated.sqrt;export var canvas2Cartesian=function canvas2Cartesian(_ref,center){var x=_ref.x,y=_ref.y;return{x:sub(x,center.x),y:multiply(sub(y,center.y),-1)};};export var cartesian2Canvas=function cartesian2Canvas(_ref2,center){var x=_ref2.x,y=_ref2.y;return{x:add(x,center.x),y:add(multiply(y,-1),center.y)};};export var cartesian2Polar=function cartesian2Polar(_ref3){var x=_ref3.x,y=_ref3.y;return{theta:atan2(y,x),radius:sqrt(add(pow(x,2),pow(y,2)))};};export var polar2Cartesian=function polar2Cartesian(_ref4){var theta=_ref4.theta,radius=_ref4.radius;return{x:multiply(radius,cos(theta)),y:multiply(radius,sin(theta))};};export var polar2Canvas=function polar2Canvas(_ref5,center){var theta=_ref5.theta,radius=_ref5.radius;return cartesian2Canvas(polar2Cartesian({theta:theta,radius:radius}),center);};export var canvas2Polar=function canvas2Polar(_ref6,center){var x=_ref6.x,y=_ref6.y;return cartesian2Polar(canvas2Cartesian({x:x,y:y},center));};","map":{"version":3,"sources":["Coordinates.ts"],"names":["sub","multiply","add","cos","sin","pow","sqrt","Animated","canvas2Cartesian","x","y","center","cartesian2Canvas","cartesian2Polar","theta","atan2","radius","polar2Cartesian","polar2Canvas","canvas2Polar"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\n\nimport { atan2 } from \"./Math\";\n\nconst { sub, multiply, add, cos, sin, pow, sqrt } = Animated;\n\nexport interface Point {\n  x: Animated.Adaptable<number>;\n  y: Animated.Adaptable<number>;\n}\n\nexport interface PolarPoint {\n  theta: Animated.Adaptable<number>;\n  radius: Animated.Adaptable<number>;\n}\n\nexport const canvas2Cartesian = ({ x, y }: Point, center: Point) => {\n  return {\n    x: sub(x, center.x),\n    y: multiply(sub(y, center.y), -1)\n  };\n};\n\nexport const cartesian2Canvas = ({ x, y }: Point, center: Point) => ({\n  x: add(x, center.x),\n  y: add(multiply(y, -1), center.y)\n});\n\nexport const cartesian2Polar = ({ x, y }: Point) => {\n  return {\n    theta: atan2(y, x),\n    radius: sqrt(add(pow(x, 2), pow(y, 2)))\n  };\n};\n\nexport const polar2Cartesian = ({ theta, radius }: PolarPoint) => ({\n  x: multiply(radius, cos(theta)),\n  y: multiply(radius, sin(theta))\n});\n\nexport const polar2Canvas = ({ theta, radius }: PolarPoint, center: Point) =>\n  cartesian2Canvas(polar2Cartesian({ theta, radius }), center);\n\nexport const canvas2Polar = ({ x, y }: Point, center: Point) =>\n  cartesian2Polar(canvas2Cartesian({ x, y }, center));\n"]},"metadata":{},"sourceType":"module"}